/*Примеры использования Typescript.*/

const a: string = '100'; // Все хорошо.
// let b: string = 100; // Ошибка.

/*--------------------------------------------------------------------------------------------------------------------*/

/*Здесь "c" может быть или числом или null.*/
const c: number | null = 10;

/*--------------------------------------------------------------------------------------------------------------------*/

const d = ['a', 'b'];
console.log(d[0].toUpperCase()); // Все хорошо.
const e = ['a', 1];
// console.log(e[0].toUpperCase()); // Ошибка, так как есть числа в массиве.

/*--------------------------------------------------------------------------------------------------------------------*/

/*Явно указываем массив строк "Array<string>", где "<string>" - уточнение.*/
const names01: Array<string> = ['a', 'b'];
/*Альтернатива предыдущей строке.*/
const names02: string[] = ['a', 'b'];

/*--------------------------------------------------------------------------------------------------------------------*/

/*"test" может быть или "a" или "b".*/
let test: 'a' | 'b';
test = 'a'; // Все хорошо.
test = 'b'; // Все хорошо.
// test = 'c'; // Ошибка.

/*--------------------------------------------------------------------------------------------------------------------*/

const user01 = {name: 'kek', age: 32};
// console.log(user01.job); // Ошибка, так как такого свойства "job" не указано в объекте "user".

/*--------------------------------------------------------------------------------------------------------------------*/

/*В Typescript есть типы и интерфейсы. Если мы хотим явно определить тип объекта, то мы должны создать тип. Типы во
многих случаях будут больше подходить, так как интерфейсы больше для ООП.*/
type User02Type = {
    /*Это функция, так как имеем метод в объекте. Типы функций лучше делать детальными.*/
    sayHello: (message: string) => void
    /*Это строка.*/
    name: string
    /*Это число.*/
    age: number
    /*Это булев тип.*/
    isHuman: boolean
    /*Это может быть либо созданный нами типом "Address01Type" или null.*/
    address: Address01Type | null
};

/*Создаем тип "Address01Type".*/
type Address01Type = {
    /*"?" обозначает необязательность.*/
    city?: string
    country: string
};

/*Создаем объект с типом "UserType".*/
const user02: User02Type = {
    sayHello(message: string) {alert('Hi!')},
    name: 'Tom',
    age: 32,
    isHuman: true,
    address: {
        city: 'A',
        country: 'B'
    }
};

/*--------------------------------------------------------------------------------------------------------------------*/

/*any означает любой тип. Можно использовать пока мы не знаем какой именно тип нам нужен. Также вместо any можно писать
Object, так как в JS все типы это объекты, но, например, складывать два объекта нельзя.*/
const sumSomething01 = (a: any, b: any) => { return a + b};
/*"20" будет приведено к числу.*/
sumSomething01(10, Number('20'));

/*--------------------------------------------------------------------------------------------------------------------*/

/*"(a: number, b: number)" является избыточным. Функция "sumSomething02()" является функцией, которая принимает два
числовых параметра "(a: number, b:number)" и возвращает числовое значение "number". Первое уже говорит о том, что в
конце избыточное уточнение типизации.*/
const sumSomething02: (a: number, b: number) => number = (a: number, b: number) => { return a + b };

/*--------------------------------------------------------------------------------------------------------------------*/

/*Объект не может быть больше своего типа, а с интерфейсами такое может быть.*/

/*--------------------------------------------------------------------------------------------------------------------*/

/*Можно автоматически генерировать тип на основе объекта.*/

/*Это готовый объект в виде state.*/
const initialState01 = {
    name: 'A',
    age: 32,
    isHuman: true
};

/*Делаем тип на основе объекта "initialState" при помощи typeof из TypeScript.*/
export type InitialState01Type = typeof initialState01;

/*Применяем тип "InitialStateType" на другом объекте.*/
const state01: InitialState01Type = {
    name: 'B',
    age: 10,
    isHuman: false
};

/*--------------------------------------------------------------------------------------------------------------------*/

/*Если у объекта изначально содержится null (как часто бывает у "initialState", то есть какое-то свойство пустое), то
надо делать так.*/
const initialState02 = {
    name: null as string | null,
    age: null as number | null,
    isHuman: null as boolean | null,
    address: {
        country: null,
        city: null
    } as Address02Type,
    counter: 0,
};

type Address02Type = {
    city: string | null
    country: string | null
};

/*--------------------------------------------------------------------------------------------------------------------*/

/*При описании action-объектов можно делать так.*/

/*Создаем константу для указания значения свойства "type" в action-объекте.*/
const GET_TASKS = "APP/GET-TASKS";

/*Создаем на основе этой константы тип для action-объекта при помощи typeof.*/
type GetTasksActionType = {
    type: typeof GET_TASKS,
    id: number
};

/*Указываем тип "GetTasksActionType" в примере action-объекта.*/
const action: GetTasksActionType = {
    type: GET_TASKS,
    id: 12
};