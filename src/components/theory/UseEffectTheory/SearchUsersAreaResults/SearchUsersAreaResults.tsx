import React, {useState, useEffect} from 'react';
/*
Подключаем сам "ReactJS", необходим везде, где мы что-то из него используем (например, JSX).
"WebPack" уже встроен в "ReactJS".

Классовый компонент позволяет реализовать локальный "state" (смотри "ProfileStatus") и методы
жизненного цикла ("componentDidMount" и т.д.), а функциональный компонент этого не может делать.
Такие возможности классового компонента были созданы благодаря тому, что "React" на основе класса
создает объект и всякий раз взаимодействует с этим объектом. А поскольку это объект, значит может
хранить такие вещи как "state" и методы. Функция же просто вызывается и возвращает "JSX", постоянное
общение с функциональным компонентом так просто не организовать. Объект живет в памяти, а функция отработала
и удалилась. Для решения этой проблемы в функциональных компонентах были созданы "Hooks" (хуки).
"Hook" - это функция, которая может делать side effects.
"React" когда вызывает функциональную компоненту, в которой есть хуки, он запоминает вызов этих хуков и
этой функции для того, чтобы потом соотносить side effects, созданные этими хуками. В отличие от классового компонента
"React" запоминает эту информацию где-то на своей стороне, а не внутри объекта.
Хуки нельзя писать в условиях и циклах, так как это нарушает порядок хуков, который является важным.
Можно писать свои кастомные хуки.

Подключаем хук "useState", который возвращает массив с двуми элементами. Первый элемент - это значение,
которое хранится в "state". Второй элемент - это функция, которая будет изменять это значение в первом элементе. Изменяя
первый элемент мы заставляем "React" перерисовывать функциональный компонент.
Хук "useState" работает асинхронно, то есть если мы изменяем какое-либо значение при помощи этого хука, то мы говорим,
чтобы "ReactJS" изменил это значение как только сможет, не обращая внимание на порядок соседних инструкций рядом с
кодом, где мы меняем какое-то значение из локального "state".
Нужно помнить, что если наш JSX в компоненте не зависит от хука "useState", то нежелательно хранить какие-то данные в
таком хуке "useState".
При вызове нескольких вторых элементов из нескольких хуков "useState" в асинхронных операциях (например, в запросах на
сервер), нужно обращать внимание на порядок этих вторых элементов из нескольких хуков "useState".

Подключаем хук "useEffect", который принимает функцию первым параметром и выполняет ее, когда произойдет
отрисовка компонента, то есть после каждого вызова "render". Вторым параметром этот хук принимает зависимости -
зависимо от чьих изменений будет срабатывать хук, если передать туда пустой массив (так лучше не делать), то
этот хук сработает только один раз. Этот хук используется для side effects.
Хук "useEffect" позволяет нам синхронизировать какие-то вещи в программе между собой. Такая синхронизация нужна для
динамического изменения верстки с целью отображения ее актуального состояния пользователю. Синхронизация между двумя
сторонами может работать двунаправленно. Синхронизация происходит после отрисовки компонента, а не до.
В хуке "useEffect" на самом деле желательно избегать пустой зависимости "[]" во втором параметре.
Если не указать второй параметр в хуке "useEffect" вообще, то он будет срабатывать при каждой отрисовке компонента.
В первом параметре хука "useEffect" нельзя использовать "async/await".
*/

import axios from 'axios';
/*
Библиотека "axios" нужна для работы с запросами на сервер.
Запросы осуществляются на "endpoints", которые представляют из себя URL.
Здесь мы испольузем API гитхаба, чтобы получать данные о пользователях гитхаба.
У каждого API сервера есть базовый URL, в данном случае это "https://api.github.com/".
К базовому URL дописываются определенные элементы (например, "/users"), чтобы получить какую-то категорию данных.
В запросе "GET" мы не можем передавать какую-либо информацию, кроме URL.
В нашем случае мы получаем ответы в формате JSON.
Существует подход "API first": сначала создается API, а потом уже front-end и back-end.
В библиотеке "axios" любой запрос "GET", "POST" или "PUT" являются "generic" и возвращают промис, который можно уточнить
при помощи "TypeScript".
*/

import {Preloader} from '../../../common/Preloader/Preloader'; /*Подключаем компонент "Preloader".*/

import {SelectedGitHubUserType, selectedGitHubUserDetailsType} from '../UseEffectTheory'; /*Импортируем типы.*/

import styles from './SearchUsersAreaResults.module.css'; /*Подключаем стили из CSS-модуля.*/


/*Создаем тип для "props". "Props" в этом компоненте должны обязательно содержать следующие поля с указанными типами.
Все это нужно для указания типа "props" в функциональном компоненте.*/
type PropsType = {
    gitHubUsers: SelectedGitHubUserType[] /*Массив с пользователями GitHub должен быть массивом с элементами типа
    "SelectedGitHubUserType", который мы импортировали сюда.*/
    setSelectedGitHubUserDetails: (selectedGitHubUserDetails: selectedGitHubUserDetailsType | null) => void
    /*Callback-функция для установки деталей профиля выбранного пользователя GitHub, которая принимает параметр типа
    "selectedGitHubUserDetailsType", который мы сюда импортировали, или "null", и ничего не возвращает.*/
    isRequestingGitHubUsers: boolean /*Значение , которое показывает идет ли сейчас запрос пользователей GitHub или нет,
    должно быть булева типа.*/
    setIsRequestingSelectedGitHubUserDetails: (isRequestingSelectedGitHubUserDetails: boolean) => void
    /*Callback-функция для установки значения, которое показывает идет ли сейчас запрос профиля выбранного пользователей
    GitHub или нет, которая принимает параметр булева типа и ничего не возвращает.*/
};


/*
"SearchUsersAreaResults" это функциональный компонент, который создан в виде стрелочной функции.
При взаимодействии с функциональным компонентом React не хранит его постоянно в памяти.
React вызывает функциональный компонент, он делает свою работу (например, возвращает JSX) и компонент удаляется
из памяти.
Функциональный компонент можно создать еще и таким образом: function SearchUsersAreaResults(props) {тело}.
Компонент это функция, которая возвращает JSX.
JSX совмещает в себе JS и HTML.
В JSX для указания класса в стилях нужно использовать "className" вместо "class".
В JSX скобки {} позволяют использовать JS-код внутри HTML-кода.
Каждый компонент это новый тег для ReactJS, и эти теги используются для вызова этих компонентов.
Теги компонентов можно вкладывать друг в друга, тем самым образуя дерево компонентов.
Каждый компонент желательно помещать в отдельный файл.
Каждый компонент всегда вызывается с объектом, внутри которого какие-то параметры.
Если параметры не указаны, то им все равно передается пустой объект в качестве параметров.
Принято объект с параметрами именовать как "props".
Вызывая тег компонента и передавая ему атрибуты, мы отдаем ему параметры.
"SearchUsersAreaResults" является компонентом, который используется для вывода списка пользователей GitHub.
Этот компонент подключается в компоненте "UseEffectTheory".
*/
export const SearchUsersAreaResults: React.FC<PropsType> = ({
                                                                gitHubUsers,
                                                                setSelectedGitHubUserDetails,
                                                                isRequestingGitHubUsers,
                                                                setIsRequestingSelectedGitHubUserDetails
                                                            }) => { /*При помощи деструктуризации "props" указываем
какие именно "props" мы получаем, чтобы не писать далее "props.gitHubUsers" и так далее. Такое мы делаем только в
функциональных компонентах. Указали при помощи "React.FC<>", что "props" в этом функциональном компоненте имеют тип
"PropsType". Также указали, что экспортируем этот компонент.*/

    console.log('RENDERING SEARCH AREA RESULTS');

    let [selectedGitHubUser, setSelectedGitHubUser] = useState<SelectedGitHubUserType | null>(null); /*При
    помощи деструктуризирующего присваивания создали две переменные. Первая переменная будет хранить первый элемент из
    хука "useState", этот элемент будет означать выбранного пользователя GitHub (изначально никого не выбрано), должен
    быть типа "SelectedGitHubUserType" или отсутствовать. Вторая переменная будет хранить функцию из хука "useState",
    которая будет изменять первый элемент (то есть указывать какой пользователь GitHub является выбранным).*/

    useEffect(() => { /*Используем хук "useEffect", чтобы синхронизировать логин выбранного пользователя GitHub и
    имени вкладки страницы.*/
            console.log('UPDATING TITLE');

            if (selectedGitHubUser) {
                document.title = selectedGitHubUser.login; /*Первый параметр это функция для изменения имени вкладки
                страницы.*/
            };
        },
        [selectedGitHubUser] /*Второй параметр это выбранный пользователя GitHub из хука "useState". Если это
        значение будет меняться, то будет срабатывать каждый раз функция из первого параметра.*/
    );

    useEffect(() => { /*Используем хук "useEffect", чтобы при выборе пользователя GitHub вызывать запрос на
    получение его профиля.*/
            console.log('REQUESTING PROFILE');

            if (selectedGitHubUser) {
                setIsRequestingSelectedGitHubUserDetails(true); /*Указываем, что идет запрос
                профиля выбранного пользователей GitHub, чтобы в компоненте "UserInfo" отобразить компонент "Preloader"
                пока запрос не завершится.*/

                axios
                    .get<selectedGitHubUserDetailsType>(`https://api.github.com/users/${selectedGitHubUser.login}`)
                    .then(response => {
                            setSelectedGitHubUserDetails(response.data);
                            setIsRequestingSelectedGitHubUserDetails(false); /*Указываем,
                            что запрос профиля выбранного пользователей GitHub больше не идет, чтобы в компоненте
                            "UserInfo" отключить компонент "Preloader".*/
                    }); /*Первый параметр это функция для запроса на получение профиля пользователя GitHub.*/
            };
        },
        [selectedGitHubUser] /*Второй параметр это выбранный пользователя GitHub из хука "useState". Если это
        значение будет меняться, то будет срабатывать каждый раз функция из первого параметра.*/
    );

    if (isRequestingGitHubUsers) { /*Пока идет запрос пользователей GitHub, мы будем показывать компонент "Preloader".*/
        return <Preloader/>
    };

    /*
    Здесь после return в компоненте начинается HTML разметка.
    Нужно помнить, что в этой разметке должен быть только один корневой элемент.
    Поскольку то, что возвращает return указано с новой строки, поэтому все возвращаемое помещено в круглые скобки.
    */
    return (
        <div> {/*Этот элемент "div" и есть наш корневой элемент.*/}
            <ul className={styles.searchUsersAreaResults}>
                {gitHubUsers /*Мапим массив с пользователями GitHub, чтобы вывести эти пользователей списком.*/
                    .map(u =>
                        <li key={u.id}
                            className={selectedGitHubUser === u ? styles.selectedUser : ''} /*Если какой-то пользователь
                            GitHub в списке совпадает с выбранным нами пользователем GitHub, то применяем к этому
                            элементу списка дополнительный стиль.*/
                            onClick={() => { /*При нажатии на элемент списка при помощи "setSelectedGitHubUser" из хука
                            "useState" мы указываем выбранного пользователя GitHub.*/
                                setSelectedGitHubUser(u);
                            }}>
                            {u.login}
                        </li>)}
            </ul>
        </div>
    );
};