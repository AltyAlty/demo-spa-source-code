import React, {useState, useEffect} from 'react';
/*
Подключаем сам "ReactJS", необходим везде, где мы что-то из него используем (например, JSX).
"WebPack" уже встроен в "ReactJS".
Классовый компонент позволяет реализовать локальный "state" (смотри "ProfileStatus") и методы
жизненного цикла ("componentDidMount" и т.д.), а функциональный компонент этого не может делать.
Такие возможности классового компонента были созданы благодаря тому, что "React" на основе класса
создает объект и всякий раз взаимодействует с этим объектом. А поскольку это объект, значит может
хранить такие вещи как "state" и методы. Функция же просто вызывается и возвращает "JSX", постоянное
общение с функциональным компонентом так просто не организовать. Объект живет в памяти, а функция отработала
и удалилась. Для решения этой проблемы в функциональных компонентах были созданы "Hooks" (хуки).
"Hook" - это функция, которая может делать side effects.
"React" когда вызывает функциональную компоненту, в которой есть хуки, он запоминает вызов этих хуков и
этой функции для того, чтобы потом соотносить side effects, созданные этими хуками. В отличие от классового компонента
"React" запоминает эту информацию где-то на своей стороне, а не внутри объекта.
Хуки нельзя писать в условиях и циклах, так как это нарушает порядок хуков, который является важным.
Можно писать свои кастомные хуки.
Подключаем хук "useState", который возвращает массив с двуми элементами. Первый элемент - это значение,
которое хранится в "state". Второй элемент - это функция, которая будет изменять это значение в первом элементе. Изменяя
первый элемент мы заставляем "React" перерисовывать функциональный компонент.
Хук "useState" работает асинхронно, то есть если мы изменяем какое-либо значение при помощи этого хука, то мы говорим,
чтобы "ReactJS" изменил это значение как только сможет, не обращая внимание на порядок соседних инструкций рядом с
кодом, где мы меняем какое-то значение из локального "state".
Подключаем хук "useEffect", который принимает функцию первым параметром и выполняет ее, когда произойдет
отрисовка компонента, то есть после каждого вызова "render". Вторым параметром этот хук принимает зависимости -
зависимо от чьих изменений будет срабатывать хук, если передать туда пустой массив (так лучше не делать), то
этот хук сработает только один раз. Этот хук используется для side effects.
*/

import axios from 'axios';
/*
Библиотека "axios" нужна для работы с запросами на сервер.
Запросы осуществляются на "endpoints", которые представляют из себя URL.
Здесь мы испольузем API гитхаба, чтобы получать данные о пользователях гитхаба.
У каждого API сервера есть базовый URL, в данном случае это "https://api.github.com/".
К базовому URL дописываются определенные элементы (например, "/users"), чтобы получить какую-то категорию данных.
В запросе "GET" мы не можем передавать какую-либо информацию, кроме URL.
В нашем случае мы получаем ответы в формате JSON.
Существует подход "API first": сначала создается API, а потом уже front-end и back-end.
В библиотеке "axios" любой запрос "GET", "POST" или "PUT" являются "generic" и возвращают промис, который можно уточнить
при помощи "TypeScript".
*/

import styles from './UseEffectTheory.module.css'; /*Подключаем стили из CSS-модуля.*/


/*Создаем тип для "props". "Props" в этом компоненте должны обязательно содержать следующие поля с указанными типами.
Все это нужно для указания типа "props" в функциональном компоненте.*/
type PropsType = {};

/*Создали тип для выбранного пользователя GitHub.*/
type SelectedGitHubUserType = {
    login: string
    id: number
};

/*Создали тип для данных, которые будем получать в ответ на запрос пользователей GitHub.*/
type GitHubSearchResult = {
    items: SelectedGitHubUserType[]
};

/*Создали тип для данных, которые будем получать в ответ на запрос деталей профиля выбранного пользователя GitHub.*/
type selectedGitHubUserDetailsType = {
    login: string
    id: number
    avatar_url: string
    followers: number
};

/*
"UseEffectTheory" это функциональный компонент, который создан в виде стрелочной функции.
При взаимодействии с функциональным компонентом React не хранит его постоянно в памяти.
React вызывает функциональный компонент, он делает свою работу (например, возвращает JSX) и компонент удаляется
из памяти.
Функциональный компонент можно создать еще и таким образом: function UseEffectTheory(props) {тело}.
Компонент это функция, которая возвращает JSX.
JSX совмещает в себе JS и HTML.
В JSX для указания класса в стилях нужно использовать "className" вместо "class".
В JSX скобки {} позволяют использовать JS-код внутри HTML-кода.
Каждый компонент это новый тег для ReactJS, и эти теги используются для вызова этих компонентов.
Теги компонентов можно вкладывать друг в друга, тем самым образуя дерево компонентов.
Каждый компонент желательно помещать в отдельный файл.
Каждый компонент всегда вызывается с объектом, внутри которого какие-то параметры.
Если параметры не указаны, то им все равно передается пустой объект в качестве параметров.
Принято объект с параметрами именовать как "props".
Вызывая тег компонента и передавая ему атрибуты, мы отдаем ему параметры.
"UseEffectTheory" является компонентом, который используется для рассмотра работы хука "useEffect" из "ReactJS".
Этот компонент подключается в компоненте "App".
*/
export const UseEffectTheory: React.FC<PropsType> = (props) => { /*Указали при помощи
"React.FC<>", что "props" в этом функциональном компоненте имеют тип "PropsType". Также указали, что экспортируем этот
компонент.*/

    let [selectedGitHubUser, setSelectedGitHubUser] = useState<SelectedGitHubUserType | null>(null); /*При
    помощи деструктуризирующего присваивания создали две переменные. Первая переменная будет хранить первый элемент из
    хука "useState", этот элемент будет означать выбранного пользователя GitHub (изначально никого не выбрано), должен
    быть типа "SelectedGitHubUserType" или отсутствовать. Вторая переменная будет хранить функцию из хука "useState",
    которая будет изменять первый элемент (то есть указывать какой пользователь GitHub является выбранным).*/

    let [selectedGitHubUserDetails, setSelectedGitHubUserDetails] = useState<selectedGitHubUserDetailsType | null>(null);
    /*При помощи деструктуризирующего присваивания создали две переменные. Первая переменная будет хранить первый
    элемент из хука "useState", этот элемент будет означать детали профиля выбранного пользователя GitHub (изначально
    отсутствуют), должен быть типа "selectedGitHubUserDetailsType" или отсутствовать. Вторая переменная будет хранить
    функцию из хука "useState", которая будет изменять первый элемент (то есть указывать детали профиля выбранного
    пользователя GitHub).*/

    let [gitHubUsers, setGitHubUsers] = useState<SelectedGitHubUserType[]>([]); /*При помощи
    деструктуризирующего присваивания создали две переменные. Первая переменная будет хранить первый элемент из хука
    "useState", этот элемент будет означать массив с пользователями GitHub (изначально пустой), должен быть типа
    массива элементов с типом "SelectedGitHubUserType". Вторая переменная будет хранить функцию из хука "useState",
    которая будет изменять первый элемент (то есть указывать массив с пользователями GitHub).*/

    let [localSearchTerm, setLocalSearchTerm] = useState('alty'); /*При помощи деструктуризирующего
    присваивания создали две переменные. Первая переменная будет хранить первый элемент из хука "useState", этот элемент
    будет означать то, что введено в данным момент в строку поиска пользователей GitHub (изначально введено "alty") для
    осуществления FLUX-круговорота в этой строке поиска. Вторая переменная будет хранить функцию из хука "useState",
    которая будет изменять первый элемент (то есть указывать, что должно быть введено в строку поиска пользователей
    GitHub).*/

    let [gitHubSearchTerm, setGitHubSearchTerm] = useState('alty'); /*При помощи деструктуризирующего
    присваивания создали две переменные. Первая переменная будет хранить первый элемент из хука "useState", этот элемент
    будет означать текст, по которому будет отправлен запрос поиска пользователей GitHub (изначально "alty"). Вторая
    переменная будет хранить функцию из хука "useState", которая будет изменять первый элемент (то есть указывать текст,
    по которому будет отправлен запрос поиска пользователей GitHub).*/

    useEffect(()=> { /*Используем хук "useEffect", чтобы синхронизировать логин выбранного пользователя GitHub и
    заголовок страницы.*/
        if (selectedGitHubUser) {
            document.title = selectedGitHubUser.login; /*Первый параметр это функция для изменения заголовка страницы.*/
        };
        },
        [selectedGitHubUser] /*Второй параметр это выбранный пользователя GitHub из хука "useState". Если это
        значение будет меняться, то будет срабатывать каждый раз функция из первого параметра.*/
    );

    useEffect(()=> { /*Используем хук "useEffect", чтобы при каждом изменении текста, по которому будет отправлен
    запрос поиска пользователей GitHub, вызывать такой запрос.*/
            axios
                .get<GitHubSearchResult>(`https://api.github.com/search/users?q=${gitHubSearchTerm}`)
                .then(response => setGitHubUsers(response.data.items)); /*Первый параметр это функция для запроса поиска
                пользователей GitHub.*/
        },
        [gitHubSearchTerm] /*Второй параметр это текст, по которому будет отправлен запрос поиска пользователей
        GitHub, из хука "useState". Если это значение будет меняться, то будет срабатывать каждый раз функция из первого
        параметра.*/
    );

    useEffect(()=> { /*Используем хук "useEffect", чтобы при выборе пользователя GitHub вызывать запрос на
    получение его профиля.*/
        if (selectedGitHubUser) {
            axios
                .get<selectedGitHubUserDetailsType>(`https://api.github.com/users/${selectedGitHubUser.login}`)
                .then(response => setSelectedGitHubUserDetails(response.data)); /*Первый параметр это функция для
                запроса на получение профиля пользователя GitHub.*/
        };
        },
        [selectedGitHubUser] /*Второй параметр это выбранный пользователя GitHub из хука "useState". Если это
        значение будет меняться, то будет срабатывать каждый раз функция из первого параметра.*/
    );

    /*
    Здесь после return в компоненте начинается HTML разметка.
    Нужно помнить, что в этой разметке должен быть только один корневой элемент.
    Поскольку то, что возвращает return указано с новой строки, поэтому все возвращаемое помещено в круглые скобки.
    */
    return (
        <div className={styles.wholeGitHubSearch}> {/*Этот элемент "div" и есть наш корневой элемент.*/}
            <div className={styles.userList}>
                <div className={styles.searchUsersArea}>
                    <input className={styles.searchUsersAreaInput}
                           placeholder='Enter a GitHub username'
                           value={localSearchTerm} /*Это поле берет значение из "localSearchTerm" из хука "useState". Мы
                           не можем напрямую ввести в это поле текст, только через FLUX-круговорот.*/
                           onChange={(e) => {setLocalSearchTerm(e.currentTarget.value)}}/>
                           {/*При изменении нами текста в поле будет вызываться "setLocalSearchTerm" из хука "useState",
                           чтобы осуществлять FLUX-круговорот текста в этом поле.*/}

                    <button className={styles.searchUsersAreaButton}
                            onClick={()=>{
                                setGitHubSearchTerm(localSearchTerm); {/*При нажатии на эту кнопку при помощи
                                "setGitHubSearchTerm" из хука "useState" мы устанавливаем текст, по которому будет
                                отправлен запрос поиска пользователей GitHub. Будет подхватываться из "localSearchTerm"
                                из хука "useState".*/}
                            }}>
                        Find
                    </button>
                </div>

                <ul className={styles.searchUsersAreaResults}>
                    {gitHubUsers /*Мапим массив с пользователями GitHub, чтобы вывести эти пользователей списком.*/
                        .map(u =>
                            <li key={u.id}
                                className={selectedGitHubUser === u ? styles.selectedUser : ''} /*Если какой-то
                                пользователь GitHub в списке совпадает с выбранным нами пользователем GitHub, то
                                применяем к этому элементу списка дополнительный стиль.*/
                                onClick={() => { /*При нажатии на элемент списка при помощи "setSelectedGitHubUser" из
                                хука "useState" мы указываем выбранного пользователя GitHub.*/
                                    setSelectedGitHubUser(u);
                                }}>
                                {u.login}
                            </li>)}
                </ul>
            </div>

            <div className={styles.userInfo}>
                {selectedGitHubUserDetails && <div> {/*Если есть данные профиля выбранного пользователя GitHub, тогда
                выводим эти данные.*/}
                    GitHub profile: {selectedGitHubUserDetails.login}
                    <br/>
                    ID: {selectedGitHubUserDetails.id}
                    <br/>
                    Followers: {selectedGitHubUserDetails.followers}
                    <br/>
                    <img src={selectedGitHubUserDetails.avatar_url}/>
                </div>}
            </div>
        </div>
    );
};