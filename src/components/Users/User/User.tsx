import React from 'react';
import {NavLink} from 'react-router-dom';
import styles from './User.module.css';
/*Импортируем из ассетов проекта аватар пользователя, на случай если у пользователя нет фото.*/
import userPhoto from '../../../assets/images/user.png';
/*Импортируем тип "UserType".*/
import {UserType} from '../../../types/types';

type PropsType = {
    /*Данные по одному пользователю для постраничного вывода должны быть в виде объекта с типом "UserType".*/
    user: UserType
    /*Специальное свойство, содержащее массив, хранящий ID пользователей, которые в какой-то определенный момент
    находятся в процессе анфолловинга/фолловинга, то есть по ним отправляются AJAX-запросы для анфолловинга/фолловинга
    от пользователя, должно быть массивом чисел.*/
    WhoIsInFollowingProgress: Array<number>
    /*TC для анфолловинга пользователей должен быть функцией, которая принимает числовой параметр и ничего не
    возвращает.*/
    unfollow: (id: number) => void
    /*TC для фолловинга пользователей должен быть функцией, которая принимает числовой параметр и ничего не
    возвращает.*/
    follow: (id: number) => void
};

/*"User" это функциональный компонент, который создан в виде стрелочной функции. "User" является компонентом, который
описывает, как должны выглядеть блоки с информацией о пользователе на странице с постраничным выводом пользователей.

Компонент "User" импортируется в файле "Users.tsx".

При помощи деструктуризации props указываем какие именно props мы получаем:
1. "user" - объект с данным по пользователю.
2. "WhoIsInFollowingProgress" - специальное свойство, содержащее массив, хранящий ID пользователей, которые в какой-то
определенный момент находятся в процессе анфолловинга/фолловинга, то есть по ним отправляются AJAX-запросы для
анфолловинга/фолловинга от пользователя.
3. "unfollow" - TC для анфолловинга пользователей.
4. "follow" - TC для фолловинга пользователей.*/
export const User: React.FC<PropsType> = ({user, WhoIsInFollowingProgress, unfollow, follow}) => {
    return (
        <div>
            <span>
                {/*Это отдельный элемент "div" для отображения фото пользователя в виде компонента "NavLink" для
                перехода на профиль пользователя.*/}
                <div>
                    {/*Создаем маршрут для пути перехода на страницу выбранного пользователя. Отрисуется компонент
                    "Profile".*/}
                    <NavLink to={'/profile/' + user.id}>
                        {/*Отображаем фото пользователя, если его нет, то подгружаем дефолтный аватар из проекта
                        приложения.*/}
                        <img src={user.photos.small !== null ? user.photos.small : userPhoto}
                             alt='' className={styles.userPhoto}/>
                    </NavLink>
                </div>

                {/*Это отдельный элемент "div" для кнопок с функционалом "Follow/Unfollow".*/}
                <div>
                    {/*Если значение "followed" (свойство, которое говорит фолловим ли мы уже пользователя или нет, это
                    свойство меняется в "usersReducer") у пользователя*/}
                    {user.followed
                        /*является true, то отображаем элемент кнопки, причем кнопка будет отключена, если на нее
                        нажали и происходит процесс анфолловинга пользователя, то есть мы берем массив
                        "WhoIsInFollowingProgress" и вызываем для него метод "some()", который вернет true если в
                        указанном массиве есть ID пользователя равное ID пользователя, указанного при создании
                        отдельного экземпляра компонента "User" в результате маппинга,*/
                        ? <button disabled={WhoIsInFollowingProgress.some(id => id === user.id)}
                            /*и если нажать на кнопку, то*/
                                  onClick={() => {
                                      /*сработает TC "unfollow()", чтобы заанфолловить пользователя,*/
                                      unfollow(user.id);
                                      /*и отобразится текст "Unfollow" на кнопке.*/
                                  }}>Unfollow</button>
                        /*Иначе если значение "followed" является false, то отображаем элемент кнопки, причем кнопка
                        будет отключена, если на нее нажали и происходит процесс фолловинга пользователя, то есть мы
                        берем массив "WhoIsInFollowingProgress" и вызываем для него метод "some()", который вернет true
                        если в указанном массиве есть ID пользователя равное ID пользователя, указанного при создании
                        отдельного экземпляра компонента "User" в результате маппинга,*/
                        : <button disabled={WhoIsInFollowingProgress.some(id => id === user.id)}
                            /*и если нажать на кнопку, то*/
                                  onClick={() => {
                                      /*сработает TC "follow()", чтобы зафолловить пользователя.*/
                                      follow(user.id);
                                      /*и отобразится текст "Follow" на кнопке.*/
                                  }}>Follow</button>
                    }
                </div>
            </span>

            {/*Это отдельный элемент "span" для отображения информации с ID, именем и статусом пользователя. А также
            имеется заглушка для страны и города пользователя, так как на данный момент на сервере такой информации
            нет.*/}
            <span>
                {/*Это отдельный элемент "span" для отображения информации с ID, именем и статусом пользователя.*/}
                <span>
                    {/*Этот элемент "div" отображает ID пользователя.*/}
                    <div>{user.id}</div>
                    {/*Этот элемент "div" отображает имя пользователя.*/}
                    <div>{user.name}</div>
                    {/*Этот элемент "div" отображает статус пользователя.*/}
                    <div>{user.status}</div>
                </span>

                {/*Это отдельный элемент "span" для отображения заглушки для страны и города пользователя.*/}
                <span>
                    {/*Этот элемент "div" отображает заглушку для страны пользователя.*/}
                    <div>{'user.location.country'}</div>
                    {/*Этот элемент "div" отображает заглушку для города пользователя.*/}
                    <div>{'user.location.city'}</div>
                </span>
            </span>
        </div>
    )
};