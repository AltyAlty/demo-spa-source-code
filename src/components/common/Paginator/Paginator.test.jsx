/*
Это файл с тестами для "Paginator.tsx".
Тесты в "TDD" пишутся заранее, чтобы программа им соответствовала.
Тесты обязуют нас писать правильно структурированную программу.
Тесты работают точечно, то есть нам не надо каждый раз запускать программу полностью, чтобы ее протестировать.
Unit-тесты тестируют отдельные части приложения (например, модули, компоненты, функции, селекторы и т.д.)
В "App.test.js" уже есть тест, который можно запустить прямо из "WebStorm" или через консоль "npm run test".
".test." в названии файла сообщает настроенной системе "Webpack" и тестовой среде разработки (это скрыто в
"react-scripts" (используется библиотека "JEST"), "create-react-app" скрыл эти детали), что такой файл содержит тесты и
IDE будет их запускать. Желательно, чтобы каждый тест проверял что-то одно.
*/

import React from 'react';
/*
Подключаем сам "ReactJS", необходим везде, где мы что-то из него используем (например, JSX).
"WebPack" уже встроен в "ReactJS".
*/
import {create} from 'react-test-renderer';
/*Мы установили библиотеку "react-test-renderer" для тестирования.
При установке этой библиотеки важно указать версию "ReactJS" и то, что эта библиотека нужа только для разработки -
"npm i react-test-renderer@16.13.1 --save -dev". Эта библиотека позволяет фейково отрисовывать компонент без браузера
для целей тестирования при помощи функции "create".*/

import Paginator from './Paginator'; /*Импортировали весь "Paginator.tsx".*/


describe('tests for Paginator component', () => { /*"describe" позволит определить IDE, что это группа
тестов.*/
    /*Тест №1. Должно отображаться корректное количество страниц в одной порции страниц.*/
    test('correct quantity of pages per a portion', () => {
        /*Шаги теста.*/
        const component = create(<Paginator totalItemsCount={11} pageSize={1} portionSize={10}/>); /*Фейково создали
        компонент "Paginator", передав ему 1) общее количество элементов для постраничного вывода, 2) максимальное
        количество элементов на одной странице в постраничном выводе, 3) свойство, которое указывает какое
        максимальное количество номеров страниц в постраничном выводе может отображаться в одной порции таких страниц.
        То есть у нас всего 11 записей и разрешено по одной записи на страницу, значит будет всего 11 страниц. А так
        как на одну порцию страниц разрешено максимум 10 страниц, то значит будет 2 порции страниц - на одной 10
        страниц, а на другой только 1 страница. Изначально будет видна первая порция, соотвественно должно быть
        отрисовано 10 "span" элементов с номерами страниц с 1 до 10.*/
        const root = component.root; /*Берем из компонента "root" (видимо элемент содержащий дерево компонента).*/
        const spans = root.findAllByType('span'); /*Ищем в этом "root" элементы "span".*/

        /*Ожидаемый результат. "expect" позволит определить IDE, что это ожидаемый результат в тесте.*/
        expect(spans.length).toBe(10); /*Проверяем, что в массиве "spans" нашлось 10 элементов, так как
        должно отрисовываться именно 10 элементов "span".*/
    });

    /*Тест №2. Если количество страниц больше 10, то должна отображаться кнопка "следующая порция страниц".*/
    test('if the quantity of pages is more than 10, then the "NEXT" button should be displayed', () => {
        /*Шаги теста.*/
        const component = create(<Paginator totalItemsCount={11} pageSize={1} portionSize={10}/>); /*Фейково создали
        компонент "Paginator", передав ему 1) общее количество элементов для постраничного вывода, 2) максимальное
        количество элементов на одной странице в постраничном выводе, 3) свойство, которое указывает какое
        максимальное количество номеров страниц в постраничном выводе может отображаться в одной порции таких страниц.
        То есть у нас всего 11 записей и разрешено по одной записи на страницу, значит будет всего 11 страниц. А так
        как на одну порцию страниц разрешено максимум 10 страниц, то значит будет 2 порции страниц - на одной 10
        страниц, а на другой только 1 страница. Изначально будет видна первая порция, соотвественно должно быть
        отрисовано 10 "span" элементов с номерами страниц с 1 до 10. Также поскольку количество порций страниц,
        которое мы имеем, больше текущего номера порции страниц (мы находимся на первой порции страниц, а порции
        две всего), должна отображаться кнопка "следующая порция страниц".*/
        const root = component.root; /*Берем из компонента "root" (видимо элемент содержащий дерево компонента).*/
        const button = root.findAllByType('button'); /*Ищем в этом "root" элемент "button".*/

        /*Ожидаемый результат. "expect" позволит определить IDE, что это ожидаемый результат в тесте.*/
        expect(button.length).toBe(1); /*Проверяем, что в массиве "button" был найден 1 элемент, так как
        должен отрисовываться всего 1 элемент "button".*/
    });
});