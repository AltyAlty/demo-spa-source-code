import React from 'react';
/*
Подключаем сам "ReactJS", необходим везде, где мы что-то из него используем (например, JSX).
"WebPack" уже встроен в "ReactJS".
*/
import {NavLink} from 'react-router-dom';
/*
Библиотека "react-router-dom" необходима для создания роутинга и маршрутов в приложении.
Подключаем "NavLink", который является аналогом элемента "a" из HTML, хотя в браузере в итоге все равно будет
отображаться элемент "a".
Но "NavLink" не перезагружает все приложение в отличии от обычного использования элемента "a", то есть "NavLink"
отменяет действие по умолчанию элемента "a".
"NavLink" используется для перемещения по "Route" маршрутам.
"NavLink" вместо атрибута "href" использует атрибут "to".
"NavLink" добавляет атрибует "class" со значением "active" к элементу "a", когда осуществляется переход по ссылке.
Но класс "active" нам не подходит, посколько React добавляет уникальный префиксы и суффиксы к значению класса из-за
использования CSS-модуля.
Атрибут "activeClassName" позволяет указывать какой именно класс добавляется к элементу "a" вместо класса "active".
*/

import styles from './Header.module.css'; /*Подключаем стили из CSS-модуля.*/
import headerLogoSource from '../../assets/images/headerlogo.png'; /*Импортируем из ассетов проекта логотип сайта.*/


/*Создаем тип для "props". "Props" в этом компоненте должны обязательно содержать следующие поля с указанными типами.
Все это нужно для указания типа "props" в функциональном компоненте.*/
type PropsType = {
    isAuth: boolean, /*Свойство, которое указывает залогинен ли пользователь, должно быть булева типа.*/
    login: string | null, /*"login" залогиненного пользователя должен быть строкой или иметь тип "null", то есть быть
    пустым.*/
    logout: () => void /*TC для осуществления логаута должен быть функцией, которая ничего не принимает и ничего не
    возвращает.*/
};


/*
"Header" это функциональный компонент, который создан в виде стрелочной функции.
При взаимодействии с функциональным компонентом React не хранит его постоянно в памяти.
React вызывает функциональный компонент, он делает свою работу (например, возвращает JSX) и компонент удаляется
из памяти.
Функциональный компонент можно создать еще и таким образом: function Header(props) {тело}.
Компонент это функция, которая возвращает JSX.
JSX совмещает в себе JS и HTML.
В JSX для указания класса в стилях нужно использовать "className" вместо "class".
В JSX скобки {} позволяют использовать JS-код внутри HTML-кода.
Каждый компонент это новый тег для ReactJS, и эти теги используются для вызова этих компонентов.
Теги компонентов можно вкладывать друг в друга, тем самым образуя дерево компонентов.
Каждый компонент желательно помещать в отдельный файл.
Каждый компонент всегда вызывается с объектом, внутри которого какие-то параметры.
Если параметры не указаны, то им все равно передается пустой объект в качестве параметров.
Принято объект с параметрами именовать как "props".
Вызывая тег компонента и передавая ему атрибуты, мы отдаем ему параметры.
"Header" является компонентом, который отрисовывает "хэдер" нашего сайта, который содержит логотип сайта
и отдельный блок, отображающий ссылку на форму логина или имя залогиненного пользователя и кнопку логаута.
Этот компонент подключается в компоненте "HeaderContainer".
*/
const Header: React.FC<PropsType> = ({isAuth, login, logout}) => { /*При помощии деструктуризации
"props" указываем какие именно "props" мы получаем, чтобы не писать далее "props.isAuth", "props.login" и так далее:
- "isAuth" - свойство, которое указывает залогинен ли пользователь;
- "login" - "login" залогиненного пользователя;
- "logout" - TC для осуществления логаута.
Такое мы делаем только в функциональных
компонентах. Указали при помощи "React.FC<>", что "props" в этом функциональном компоненте имеют тип "PropsType".*/

    /*
    Здесь после return в компоненте начинается HTML разметка.
    Нужно помнить, что в этой разметке должен быть только один корневой элемент.
    Поскольку то, что возвращает return указано с новой строки, поэтому все возвращаемое помещено в круглые скобки.
    */
    return (
        <header className={styles.header}> {/*Этот элемент "header" и есть наш корневой элемент.*/}
            <img src={headerLogoSource} alt=''/> {/*"Хэдер" нашего сайта содержит логотип.*/}

            <div className={styles.loginBlock}> {/*А также "хэдер" нашего сайта содержит отдельный блок,
            отображающий ссылку на форму логина или имя залогиненного пользователя и кнопку логаута.*/}
                {isAuth ? /*Если свойство "isAuth", которое указывает залогинен ли пользователь, является "TRUE",
                то*/
                    <div>{login} - <button onClick={logout}>Log out</button></div> /*отрисуется элемент
                    "div" с логином пользователя, который берется из "props", и с элементом "button", который является
                    кнопкой логаута (сработает TC "logout"),*/
                    : <NavLink to={'/login/'}>Log in</NavLink>} {/*иначе отрисуется элемент "NavLink" для перехода
                    на страницу логинизации.*/}
            </div>
        </header>
    );
};


export default Header; /*Экспортируем компонент "Header" по default и будем его использовать в нашем проекте под именем
"Header", экспорт необходим для импорта.*/