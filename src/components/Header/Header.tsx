import React from 'react';
/*Импортируем компонент "NavLink", который является аналогом элемента "a" из HTML, хотя в браузере в итоге все равно
будет отображаться элемент "a". Но компонент "NavLink" не перезагружает все приложение в отличие от обычного
использования элемента "a", то есть компонент "NavLink" отменяет действие, которое есть у элемента "a" по умолчанию.

Компонент "NavLink" используется для перемещения по маршрутам компонентов "Route". Компонент "NavLink" вместо атрибута
"href" использует атрибут "to".

"NavLink" добавляет атрибут "class" со значением "active" к элементу "a", когда осуществляется переход по ссылке. Но
класс "active" нам не подходит, поскольку React добавляет уникальные префиксы и суффиксы к значениям классов из-за
использования CSS-модуля. Атрибут "activeClassName" позволяет указывать какой именно класс добавляется к элементу "a"
вместо класса "active".

Но в итоге здесь мы используем компонент "Link", который является аналогом компонент "NavLink".*/
import {Link} from 'react-router-dom';
/*Из библиотеки React Redux импортируем хуки:
1. "useSelector()" - это хук, который принимает селектор и возвращает данные, возвращающие этим селектором.
2. "useDispatch()" - это хук, который принимает AC или TC и диспатчит их.*/
import {useDispatch, useSelector} from 'react-redux';
/*Импортируем TC "logout()".*/
import {logout} from '../../redux/auth-reducer';
/*Импортируем селектор "getLogin()" и "getIsAuth()".*/
import {getLogin, getIsAuth} from '../../redux/auth-selectors';
/*Импортируем из UI-фреймворка Ant Design несколько элементов. Компонент "Layout" для получения из него компонента
"Header", чтобы использовать его как тег для реализации хэдера нашего приложения. Компонент "Menu" для реализации
элементов меню. Компонент "Avatar" для реализации заглушки для аватара пользователя. Компонент "Row" для реализации
строк. Компонент "Col" для реализации столбцов, в одной строке может быть 24 единицы столбцов. Компонент "Button" для
реализации кнопок. Компонент "Image" для реализации элементов, отображающих изображения (в итоге не используем).*/
import {Layout, Menu, Avatar, Row, Col, Button} from 'antd';
/*Импортируем иконки из UI-фреймворка Ant Design.*/
import {UserOutlined} from '@ant-design/icons';
import styles from './Header.module.css';
/*Импортируем из ассетов проекта логотип сайта.*/
import headerLogoSource from '../../assets/images/headerlogo.png';

type PropsType = {};

/*"Header" это функциональный компонент, который создан в виде стрелочной функции. "Header" является компонентом,
который отрисовывает хэдер нашего сайта, содержащий логотип сайта и отдельный блок, отображающий ссылку на форму логина
или имя залогиненного пользователя с кнопкой логаута.

Компонент "Header" импортируется в файле "App.tsx".*/
export const Header: React.FC<PropsType> = (props) => {
    /*При помощи деструктуризации берем компонент "Header" из компонента "Layout" из UI-фреймворка Ant Design, чтобы
    использовать его как тег для реализации хэдера нашего приложения.*/
    const {Header} = Layout;
    /*При помощи хука "useSelector()", передав в него селектор "getIsAuth()", получаем информацию являемся ли мы
    залогиненными в приложение или нет.*/
    const isAuth = useSelector(getIsAuth);
    /*При помощи хука "useSelector()", передав в него селектор "getLogin()", получаем логин залогиненного
    пользователя.*/
    const login = useSelector(getLogin);
    /*Сохраняем вызов хука "useDispatch()" для более краткого использования хука "useDispatch()".*/
    const dispatch = useDispatch();
    /*Таким образом используем TC "logout()" для использования его ниже.*/
    const logoutCallback = () => { dispatch(logout()) };

    return (
        /*Внутри этот компонент "Header" содержит один компонент "Row", что означает, что внутри содержится только одна
        строка элементов.*/
        <Header className={styles.header}>
            {/*Внутри этого компонента "Row" используется несколько компонентов "Col", обозначающих колонки в строке.*/}
            <Row>
                {/*Первый компонент "Col" занимает 2 единицы из 24-х. Внутри находится компонент "Image" c изображением
                логотипа сайта "headerLogoSource". Этот компонент "Image" содержит атрибут "preview" со значением
                "false", чтобы была отключена опция увеличения изображения для просмотра, которая предоставляется
                UI-фреймворком Ant Design. Но в итоге вместо компонента "Image" используем элемент "img".*/}
                <Col span={2}>
                    <img src={headerLogoSource} alt=''/>
                </Col>

                {/*Второй компонент "Col" занимает 17 единиц из 24-х. Внутри находится компонент "Menu", представляющий
                собой меню с одним компонентом, который в свою очередь содержит компонент "Link", представляющий собой
                ссылку для перехода на страницу пользователей. Компонент "Menu" благодаря атрибуту "theme" со значением
                "dark" имеет темную тему, а благодаря атрибуту "mode" со значением "horizontal" имеет горизонтальный тип
                расположения.*/}
                <Col span={17}>
                    <Menu theme='dark' mode='horizontal'>
                        <Menu.Item key='/users/'>
                            <Link to='/users/'>Users</Link>
                        </Menu.Item>
                    </Menu>
                </Col>

                {/*Если свойство "isAuth", которое указывает залогинен ли пользователь, является true, то отрисуется
                пустой элемент "<>", содержащий три компонента "Col". Первый компонент "Col" содержит компонент
                "Avatar", представляющий собой заглушку для аватара пользователя, и занимает 1 единицу. Этот компонент
                "Avatar" имеет атрибут "style" для стилизации цвета заднего фона этого элемента, и атрибут "icon" со
                значением "UserOutlined", чтобы подгрузить иконку из списка иконок, которые предоставляются
                UI-фреймворком Ant Design. Второй компонент "Col" содержит элемент "a", содержащий внутри себя логин
                залогиненного пользователя, и занимает 2 единицы. Третий компонент "Col" содержит компонент "Button",
                который является кнопкой логаута (при нажатии сработает TC "logout()"), и занимает 2 единицы.*/}
                {isAuth
                    ?
                    <>
                        <Col span={1}>
                            <Avatar icon={<UserOutlined/>}/>
                        </Col>

                        <Col span={2}>
                            <a href='/profile/'>{login}</a>
                        </Col>

                        <Col span={2}>
                            <Button onClick={logoutCallback}>Log out</Button>
                        </Col>
                    </>
                    /*Иначе отрисуется один компонент "Col", занимающий 2 единицы и содержащий компонент "Button",
                    который в свою очередь содержит компонент "Link" для перехода на страницу логинизации. Этот
                    компонент "Col" имеет атрибут "offset", благодаря которому этот компонент сдвигается вправо на 3
                    единицы.*/
                    :
                    <Col span={2} offset={3}>
                        <Button>
                            <Link to={'/login/'}>Log in</Link>
                        </Button>
                    </Col>}
            </Row>
        </Header>
    );
};