import React from 'react';
/*
Подключаем сам "ReactJS", необходим везде, где мы что-то из него используем (например, JSX).
"WebPack" уже встроен в "ReactJS".
*/
import {NavLink} from 'react-router-dom';
/*
Библиотека "react-router-dom" необходима для создания роутинга и маршрутов в приложении.
Подключаем "NavLink", который является аналогом элемента "a" из HTML, хотя в браузере в итоге все равно будет
отображаться элемент "a".
Но "NavLink" не перезагружает все приложение в отличии от обычного использования элемента "a", то есть "NavLink"
отменяет действие по умолчанию элемента "a".
"NavLink" используется для перемещения по "Route" маршрутам.
"NavLink" вместо атрибута "href" использует атрибут "to".
"NavLink" добавляет атрибует "class" со значением "active" к элементу "a", когда осуществляется переход по ссылке.
Но класс "active" нам не подходит, посколько React добавляет уникальный префиксы и суффиксы к значению класса из-за
использования CSS-модуля.
Атрибут "activeClassName" позволяет указывать какой именно класс добавляется к элементу "a" вместо класса "active".
*/

import styles from './../Dialogs.module.css'; /*Подключаем стили из CSS-модуля.*/

import {AvatarSourceType} from '../../../types/types'; /*Подключаем типы.*/


/*Создаем тип для "props". "Props" в этом компоненте должны обязательно содержать следующие поля с указанными типами.
Все это нужно для указания типа "props" в функциональном компоненте.*/
type PropsType = {
    id: number /*"ID" диалога должно быть числом.*/
    name: string /*Имя, с кем ведется диалог, должно быть строкой.*/
    avatar: AvatarSourceType /*Аватар того, с кем ведется диалог, должен быть типа "AvatarSourceType".*/
};


/*
"DialogItem" это функциональный компонент, который создан в виде стрелочной функции.
При взаимодействии с функциональным компонентом React не хранит его постоянно в памяти.
React вызывает функциональный компонент, он делает свою работу (например, возвращает JSX) и компонент удаляется
из памяти.
Функциональный компонент можно создать еще и таким образом: function DialogItem(props) {тело}.
Компонент это функция, которая возвращает JSX.
JSX совмещает в себе JS и HTML.
В JSX для указания класса в стилях нужно использовать "className" вместо "class".
В JSX скобки {} позволяют использовать JS-код внутри HTML-кода.
Каждый компонент это новый тег для ReactJS, и эти теги используются для вызова этих компонентов.
Теги компонентов можно вкладывать друг в друга, тем самым образуя дерево компонентов.
Каждый компонент желательно помещать в отдельный файл.
Каждый компонент всегда вызывается с объектом, внутри которого какие-то параметры.
Если параметры не указаны, то им все равно передается пустой объект в качестве параметров.
Принято объект с параметрами именовать как "props".
Вызывая тег компонента и передавая ему атрибуты, мы отдаем ему параметры.
"DialogItem" является компонентом, который описывает, как должны выглядеть диалоги.
Этот компонент подключается в компоненте "Dialogs".
*/
const DialogItem: React.FC<PropsType> = ({id, name, avatar}) => { /*При помощи деструктуризации "props"
указываем какие именно "props" мы получаем, чтобы не писать далее "props.id", "props.name" и так далее:
- "id" - "ID" диалога;
- "name" - имя, с кем ведется диалог;
- "avatar" - аватар того, с кем ведется диалог.
Такое мы делаем только в функциональных компонентах. Указали при помощи "React.FC<>", что "props" в этом
функциональном компоненте имеют тип "PropsType".*/
    let path = '/dialogs/' + id; /*Путь для "NavLink" формируется на основе "ID" пользователя, который берется из
    параметров "props".*/

    /*
    Здесь после return в компоненте начинается HTML разметка.
    Нужно помнить, что в этой разметке должен быть только один корневой элемент.
    Поскольку то, что возвращает return указано с новой строки, поэтому все возвращаемое помещено в круглые скобки.
    */
    return (
        <div className={styles.dialog}> {/*Этот элемент "div" и есть наш корневой элемент.
        Этот элемент представляет из себя типовой пункт диалогов, который будет отрисовываться в компоненте "Dialogs"
        при помощи метода "map".*/}
            <img src={avatar} alt=''/> {/*Пункт диалога содержит аватар пользователя, ссылка на который берется
            из параметров "props".*/}

            <NavLink to={path} activeClassName={styles.active}>{name}</NavLink> {/*А также пункт диалога содержит
            элемент "NavLink" с именем пользователя, которое берется из параметров "props".*/}
        </div>
    )
};


export default DialogItem; /*Экспортируем компонент "DialogItem" по default и будем его использовать в нашем проекте под
именем "DialogItem", экспорт необходим для импорта.*/