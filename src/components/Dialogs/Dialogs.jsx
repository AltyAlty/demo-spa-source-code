import React from 'react';
/*
Подключаем сам "ReactJS", необходим везде, где мы что-то из него используем (например, JSX).
"WebPack" уже встроен в "ReactJS".
*/
import {Field, reduxForm} from 'redux-form';
/*
Библиотека "redux-form" нужна для работы с формами.
Эта библиотека добавляет в "store", то есть в глобальный "state" свой "reducer" и
обрабатывает какую-то свою ветку данных. Эта ветка процессит все формы на сайте, что позволяет нам меньше делать работы
организации данных форм в "state".
Эта библиотека предоставляет специальный HOC. Задача компонента, которым этот HOC обвернет другой компонент,
является общаться со своей частью в "reducer".
Эта библиотека является устаревшей, поэтому лучше использовать более актуальные аналоги, например, "react-final-form",
который работыет на хуках. Так же может подойти "formik".
Эта библиотека, добавляя свою часть в глобальный "state", обязуется заниматься круговоротом данных (FLEX) со всеми
формами в приложении. То есть нам самим не нужно будет что-то диспатчить. Часть "state", которую создает эта библиотека,
не является по сути данными, относящимися к BLL, но при этом находятся в глобальном "state".
Также эта библиотека упрощает создание валидации форм, так как в ее "state" есть полезные для этого данные (поля и
свойства).
Так же стоит помнить, что дефолтное поведение кнопки при "submit" это отправка данных на сервер,
что является индикатором для перерисовки в React.
После создания части в глобальном "state", нужно необходимые формы обварачивать в HOC "reduxForm" из библиотеки
"redux-form" (как и метод "connect", метод "reduxForm" не совсем является HOC, он вызывается дважды, сначала мы
вызываем функцию "reduxForm" и настраиваем ее, а потом она уже вернет нам некий HOC, и этим HOC при помощи замыкания
мы обворачиваем форму, вследствие чего вокруг компонента с формой появится контейненый компонент, который будет
диспатчить и общаться с глобальным "state").
Каждой форме нужно давать уникальное имя, чтобы не появилось проблем с библиотекой "redux-form".
Вместо "input" необходимо использовать "Field" из библиотеки "redux-form". Указывая в нем атрибут "component", мы
указываем какой элемент нужно отрисовать. Другие указанные атрибуты перейдут в отрисованный элемент. Также необходимо
указывать атрибут "name", чтобы дать имя отправляемым через этот "input" данным. Библиотека "redux-form" будет
реагировать на эти атрибуты "name" и осуществлять круговорот данных.

Для получения данных при "submit" есть особый callback "handleSubmit" в "props", который создается при обворачивании
"reduxForm". В форме в событии "onSubmit" нужно указывать этот callback. В этом callback отключено дефолтное поведение
по перезагрузке страницы. Также в нем идет сбор всех данных и они упаковываются в объект, а затем вызывается
"props.onSubmit()" у родителя (то есть у контейнерного компонента над компонентом с формой), в который передается этот
объект с данными. То есть мы должны в контейнерный компонент над компонентом с формой передать некий метод,
срабатывающий при событии "onSubmit". Этот некий метод будет использоваться для передачи данных формы во внешний мир,
то есть в глобальный "state".

То есть в нашем случае происходит следующее:
- callback "handleSubmit" указан в компоненте "AddMessageForm".
- обворачиваем компонент "AddMessageForm" HOC-ом "reduxForm" в компоненте "AddMessageReduxForm", тем самым предоставляя
callback "handleSubmit" для компонента "AddMessageForm".
- компонент "AddMessageReduxForm" указывается в компоненте "Dialogs", куда в событие "onSubmit" будет попадать объект
с данными, сформированный в событии "onSubmit" при помощи callback "handleSubmit" в компоненте "AddMessageForm".

То есть при срабатывании события "onSubmit" сначала вызывается callback "handleSubmit" в компоненте "AddMessageForm",
который собирает все данные из формы и помещает их в объект, потом внутри callback "handleSubmit" вызывается нами
созданный callback "addNewMessage" (доступен из контейнерного компонента "AddMessageReduxForm") из компонента "Dialogs",
в который передается указанный объект с данными и собираются в одном месте, потом эти данные передаются в компонент
"AddMessageReduxForm", из которого перенаправляются в глобальный "state" в виде объекта под именем
"dialogAddMessageForm".

То есть общая логика при работе с библиотекой "redux-form" такова:
- вынести саму форму в отдельный компонент;
- повесить callback "handleSubmit" в качестве обработчика события "onSubmit" в этой форме;
- в этой форме вместо элементов "input" и прочего используем элемент "Field";
- обворачиваем эту форму HOC-ом "reduxForm".
*/
import {maxLengthCreator, required} from '../../utils/validators/validators'; /*Подключаем валидаторы для полей форм.*/
import {Textarea} from '../common/FormsControls/FormsControls'; /*Подключаем созданный нами компонент "Textarea" для
создания элемента "textarea" с возможностью указывать валидацию.*/

import styles from './Dialogs.module.css'; /*Подключаем стили из CSS-модуля.*/

import DialogItem from './DialogItem/DialogItem'; /*Подключаем компонент "DialogItem".*/
import Message from './Message/Message'; /*Подключаем компонент "Message".*/
import IncomingMessage from './IncomingMessage/IncomingMessage'; /*Подключаем компонент "IncomingMessage".*/


const maxLength10 = maxLengthCreator(10); /*Создали валидатор, который проверяет не введено ли больше 10
символов в поле.*/

/*
"AddMessageForm" это функциональный компонент, который создан в виде стрелочной функции.
Функциональный компонент можно создать еще и таким образом: function AddMessageForm(props) {тело}.
Компонент это функция, которая возвращает JSX.
JSX совмещает в себе JS и HTML.
В JSX для указания класса в стилях нужно использовать "className" вместо "class".
В JSX скобки {} позволяют использовать JS-код внутри HTML-кода.
Каждый компонент это новый тег для ReactJS, и эти теги используются для вызова этих компонентов.
Теги компонентов можно вкладывать друг в друга, тем самым образуя дерево компонентов.
Каждый компонент желательно помещать в отдельный файл.
Каждый компонент всегда вызывается с объектом, внутри которого какие-то параметры.
Если параметры не указаны, то им все равно передается пустой объект в качестве параметров.
Принято объект с параметрами именовать как "props".
Вызывая тег компонента и передавая ему атрибуты, мы отдаем ему параметры.
"AddMessageForm" является компонентом, который представляет из себя форму для добавления исходящих сообщений
в диалогах в виде заготовки для обворачивания ее в HOC "reduxForm".
Этот компонент подключается в компоненте "AddMessageReduxForm" и обварачивается там в HOC "reduxForm", тем самым
получая callback "handleSubmit".
*/
const AddMessageForm = (props) => {
    /*
    Здесь после return в компоненте начинается HTML разметка.
    Нужно помнить, что в этой разметке должен быть только один корневой элемент.
    Поскольку то, что возвращает return указано с новой строки, поэтому все возвращаемое помещено в круглые скобки.
    */
    return (
        <form onSubmit={props.handleSubmit}> {/*Здесь в элементе "form "в событии "onSubmit" указываем
        callback "handleSubmit". Этот элемент "form" и есть наш корневой элемент"*/}
            <div> {/*Создаем элемент "textarea" при помощи элемента "Field". Это будет поле для ввода текста сообщения.
            Все это помещаем в отдельный элемент "div".*/}
                <Field component={Textarea} /*Указываем, что отрисовываем созданный нами элемент "Textarea", который из
                себя представляет элемент "textarea" с возможностью указывать валидацию.*/
                       name={"newMessageText"} /*Задаем имя данным, которые будут вводится в это поле.*/
                       placeholder={"Enter your message"} /*Указываем текст "placeholder".*/
                       validate={[required, maxLength10]}/> {/*Указываем, что используем два валидатора "required" и
                       "maxLength10".*/}
            </div>

            <div> {/*Создаем специальный элемент "div", внутри которого будет находится элемент "button", который будет
            использоваться как кнопка для сабмита данных введенных в форму.*/}
                <button>Add message</button>
            </div>
        </form>
    )
};

/*Это отдельный контейнерный компонент, цель которого обвернуть компонент "AddMessageForm" в HOC "reduxForm", чтобы
предоставить callback "handleSubmit". Именно компонент "AddMessageReduxForm" будет заниматься общением
с глобальным "state".*/
const AddMessageReduxForm = reduxForm({
    form: 'dialogAddMessageForm' /*Это то самое уникальное имя для данных этой формы, которые будут попадать
    в глобальный "state".*/
})(AddMessageForm);

/*
"Dialogs" это функциональный компонент, который создан в виде стрелочной функции.
При взаимодействии с функциональным компонентом React не хранит его постоянно в памяти.
React вызывает функциональный компонент, он делает свою работу (например, возвращает JSX) и компонент удаляется
из памяти.
Функциональный компонент можно создать еще и таким образом: function Dialogs(props) {тело}.
Компонент это функция, которая возвращает JSX.
JSX совмещает в себе JS и HTML.
В JSX для указания класса в стилях нужно использовать "className" вместо "class".
В JSX скобки {} позволяют использовать JS-код внутри HTML-кода.
Каждый компонент это новый тег для ReactJS, и эти теги используются для вызова этих компонентов.
Теги компонентов можно вкладывать друг в друга, тем самым образуя дерево компонентов.
Каждый компонент желательно помещать в отдельный файл.
Каждый компонент всегда вызывается с объектом, внутри которого какие-то параметры.
Если параметры не указаны, то им все равно передается пустой объект в качестве параметров.
Принято объект с параметрами именовать как "props".
Вызывая тег компонента и передавая ему атрибуты, мы отдаем ему параметры.
"Dialogs" является компонентом, который отображает диалоги.
Этот компонент подключается в компоненте "DialogsContainer".
Внутри компонента "Dialogs" подключаются компоненты:
- "DialogItem", который описывает, как должны выглядеть диалоги;
- "Message", который описывает, как должны выглядеть исходящие сообщения;
- "IncomingMessage", который описывает, как должны выглядеть входящие сообщения;
- "AddMessageReduxForm", в котором обворачиваем компонент "AddMessageForm" HOC-ом "reduxForm",
тем самым предоставляя callback "handleSubmit" для компонента "AddMessageForm".
*/
const Dialogs = (props) => {
    /*
    В JSX в массив можно вкладывать компоненты.
    В React, если мы передаем какой-либо массив, то JSX отобразит каждый элемент этого массива в виде строки.
    "map" - это метод массива из JS, который позволяет создать новый массив на основе преобразования исходного массива.
    Метод "map" принимает стрелочную функцию.
    То есть в нашем случае будет сначала браться первый объект из исходного массива объектов
    и на основе данных этого объекта будет формироваться первый элемента нового массива, который
    будет из себя представлять JSX компонента, указанного в стрелочной функции.
    Потом будет браться следующий объект из исходного массива объектов
    и на основе данных уже этого объекта будет формироваться следующий элемента нового массива, который
    будет из себя представлять JSX компонента, указанного в стрелочной функции.
    И так будет продолжаться до тех пор, пока мы не переберем все объекты в изначальном массиве объектов.
    То есть переданная в метод "map" стрелочная функция вызывается столько раз, сколько элементов в изначальном массиве
    объектов.
    В итоге получится новый массив с элементами в виде компонентов, построенными на основе данных из BLL.
    Вызвав такой массив в JSX мы отобразим наши компоненты.
    Массив "dialogsElements" содержит диалоги пользователя.
    Массив "messagesElements" содержит исходящие сообщения пользователя.
    Массив "incomingMessagesElement" содержит входящие сообщения пользователя.
    При использовании метода "map" нужно указывать атрибут "key" для избежания ошибок.
    */
    let dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem name={d.name}
                                                                         id={d.id}
                                                                         avatar={d.avatar}
                                                                         key={d.id}/>);

    let messagesElements = props.dialogsPage.messagesData.map(m => <Message id={m.id}
                                                                            message={m.message}
                                                                            avatar={m.avatar}
                                                                            key={m.id}/>);

    let incomingMessagesElement = props.dialogsPage.incomingMessagesData.map(im => <IncomingMessage id={im.id}
                                                                                                   message={im.message}
                                                                                                   avatar={im.avatar}
                                                                                                   key={im.id}/>);

    let addNewMessage = (values) => { /*Создали специальный callback "addNewMessage", который будет вызываться при
    срабатывании события "onSubmit" в форме.*/
        props.addMessage(values.newMessageText); /*Здесь мы вызываем AC "addMessage", полученный из props, и передаем
        ему текст исходящего сообщения.*/
    };

    /*
    Здесь после return в компоненте начинается HTML разметка.
    Нужно помнить, что в этой разметке должен быть только один корневой элемент.
    Поскольку то, что возвращает return указано с новой строки, поэтому все возвращаемое помещено в круглые скобки.
    */
    return (
        <div className={styles.dialogs}> {/*Этот элемент "div" и есть наш корневой элемент.*/}
            <div className={styles.dialogsItems}>{dialogsElements}</div> {/*Этот элемент "div" содержит список
            диалогов.*/}

            <div className={styles.messages}> {/*Этот элемент "div" содержит внутри два других элемента "div".*/}
                <div>{messagesElements}</div> {/*Этот элемент "div" содержит исходящие сообщения.*/}
                <AddMessageReduxForm onSubmit={addNewMessage}/> {/*Здесь в событии "onSubmit" будет приходить объект с
                данными из callback "handleSubmit" из компонента "AddMessageForm", который обвернут
                компонентом "AddMessageReduxForm". Далее будет вызываться при этом событии нами созданный
                callback "addNewMessage", в который будет передаваться этот объект с данными. После этого эти данные
                будут отправлятся в часть глобального "state", которую обрабатывает библиотека"redux-form", с целью
                осуществления работы нашей формы логина. Поскольку мы вызываем функцию "addNewMessage" как callback,
                поэтому не ставим "()" после имени функции. Но теперь после отправки сообщения окно для ввода текста
                сообщения не будет очищаться, так как библиотека "redux-form" хоть и осуществляет FLUX-круговорот,
                но очистку не осуществляет.*/}
            </div>

            <div className={styles.incomingMessages}>{incomingMessagesElement}</div> {/*Этот элемент "div" содержит
            входящие сообщения.*/}
        </div>
    );
};

export default Dialogs; /*Экспортируем компонент "Dialogs" по default, экспорт необходим для импорта.*/