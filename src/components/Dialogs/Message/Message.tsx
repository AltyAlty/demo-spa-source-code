import React from 'react';
/*
Подключаем сам "ReactJS", необходим везде, где мы что-то из него используем (например, JSX).
"WebPack" уже встроен в "ReactJS".
*/

import styles from './../Dialogs.module.css'; /*Подключаем стили из CSS-модуля.*/

import {AvatarSourceType} from '../../../types/types'; /*Подключаем типы.*/


/*Создаем тип для "props". "Props" в этом компоненте должны обязательно содержать следующие поля с указанными типами.
Все это нужно для указания типа "props" в функциональном компоненте.*/
type PropsType = {
    id: number /*"ID" исходящего сообщения должно быть числом. Мы это здесь не используем, но указываем, так как
    передаем этот "ID" в компоненте "Dialogs" в компонент "Message" при использовании функции "map".*/
    message: string /*Текст исходящего сообщения должно быть строкой.*/
    avatar: AvatarSourceType /*Аватар того, от кого отправлено исходящее сообщение, должен быть типа
    "AvatarSourceType".*/
};


/*
"Message" это функциональный компонент, который создан в виде стрелочной функции.
При взаимодействии с функциональным компонентом React не хранит его постоянно в памяти.
React вызывает функциональный компонент, он делает свою работу (например, возвращает JSX) и компонент удаляется
из памяти.
Функциональный компонент можно создать еще и таким образом: function Message(props) {тело}.
Компонент это функция, которая возвращает JSX.
JSX совмещает в себе JS и HTML.
В JSX для указания класса в стилях нужно использовать "className" вместо "class".
В JSX скобки {} позволяют использовать JS-код внутри HTML-кода.
Каждый компонент это новый тег для ReactJS, и эти теги используются для вызова этих компонентов.
Теги компонентов можно вкладывать друг в друга, тем самым образуя дерево компонентов.
Каждый компонент желательно помещать в отдельный файл.
Каждый компонент всегда вызывается с объектом, внутри которого какие-то параметры.
Если параметры не указаны, то им все равно передается пустой объект в качестве параметров.
Принято объект с параметрами именовать как "props".
Вызывая тег компонента и передавая ему атрибуты, мы отдаем ему параметры.
"Message" является компонентом, который описывает, как должны выглядеть исходящие сообщения.
Этот компонент подключается в компоненте "Dialogs".
*/
const Message: React.FC<PropsType> = ({message, avatar}) => { /*При помощи деструктуризации "props"
указываем какие именно "props" мы получаем, чтобы не писать далее "props.message" и так далее:
- "message" - текст исходящего сообщения;
- "avatar" - аватар того, от кого отправлено исходящее сообщение.
Такое мы делаем только в функциональных
компонентах. Указали при помощи "React.FC<>", что "props" в этом функциональном компоненте имеют тип "PropsType".*/

    /*
    Здесь после return в компоненте начинается HTML разметка.
    Нужно помнить, что в этой разметке должен быть только один корневой элемент.
    Поскольку то, что возвращает return указано с новой строки, поэтому все возвращаемое помещено в круглые скобки.
    */
    return (
        <div className={styles.message}> {/*Этот элемент "div" и есть наш корневой элемент.
        Этот элемент представляет из себя типовое отображение исходящих сообщений, которое будет отрисовываться в
        компоненте "Dialogs" при помощи метода "map".*/}
            <img src={avatar} alt="."/> {/*Исходящее сообщение содержит аватар пользователя, ссылка на который
            берется из параметров "props".*/}

            {message} {/*Также исходящее сообщение содержит текст этого сообщения, которое берется из
            параметров "props".*/}
        </div>
    )
};


export default Message; /*Экспортируем компонент "Message" по default и будем его использовать в нашем проекте под
именем "Message", экспорт необходим для импорта.*/