import React from 'react';
/*
Подключаем сам "ReactJS", необходим везде, где мы что-то из него используем (например, JSX).
"WebPack" уже встроен в "ReactJS".
*/

import styles from './Profile.module.css'; /*Подключаем стили из CSS-модуля.*/

import ProfileInfo from './ProfileInfo/ProfileInfo'; /*Подключаем компонент "ProfileInfo".*/
import MyPostsContainer from './MyPosts/MyPostsContainer'; /*Подключаем компонент "MyPostsContainer".*/

import {ProfileType} from '../../types/types'; /*Подключаем типы.*/


/*Создаем тип для "props" для компонента "Profile". "Props" этого компонента должны обязательно содержать следующие поля
с указанными типами.*/
type PropsType = {
    profile:ProfileType | null /*Информация о профиле пользователя, полученная с сервера должна быть типа "PostType"
    или иметь тип "null", то есть быть пустой. Тип "PostType" был создан нами и импортирован сюда.*/
    status: string | null /*Данные статуса пользователя для страницы профиля должны быть строкой или иметь тип "null",
    то есть быть пустыми.*/
    isOwner: boolean /*Свойство, которое показывает является ли залогиненный пользователь владельцем профиля, который в
    данный момент отображается на странице профиля, должно быть булева типа.*/
    updateUserStatus: (status: string) => void /*TC для изменения данных по статусу пользователя на странице профиля
    должен быть функцией, которая принимает строковой параметр и ничего не возвращает.*/
    saveUserPhoto: (photoFile: File) => void /*TC для загрузки фото пользователя на странице профиля и дальнейшего его
    отображения в нашем приложении должен быть функцией, которая принимает объект с фото пользователя, которое типа
    "File" из "TypeScript" и ничего не возвращает.*/
    saveProfile: (profile: ProfileType) => Promise<any> /*TC для отправки новых данных профиля пользователя на странице
    профиля и дальнейшего их отображения в нашем приложении должен быть функцией, которая принимает объект типа
    "ProfileType" и возвращает какой-либо промис, так как мы в файле "ProfileInfo.tsx" используем "then." вместе с этим
    TC.*/
};


/*
"Profile" это функциональный компонент, который создан в виде стрелочной функции.
При взаимодействии с функциональным компонентом React не хранит его постоянно в памяти.
React вызывает функциональный компонент, он делает свою работу (например, возвращает JSX) и компонент удаляется
из памяти.
Функциональный компонент можно создать еще и таким образом: function Profile(props) {тело}.
Компонент это функция, которая возвращает JSX.
JSX совмещает в себе JS и HTML.
В JSX для указания класса в стилях нужно использовать "className" вместо "class".
В JSX скобки {} позволяют использовать JS-код внутри HTML-кода.
Каждый компонент это новый тег для ReactJS, и эти теги используются для вызова этих компонентов.
Теги компонентов можно вкладывать друг в друга, тем самым образуя дерево компонентов.
Каждый компонент желательно помещать в отдельный файл.
Каждый компонент всегда вызывается с объектом, внутри которого какие-то параметры.
Если параметры не указаны, то им все равно передается пустой объект в качестве параметров.
Принято объект с параметрами именовать как "props".
Вызывая тег компонента и передавая ему атрибуты, мы отдаем ему параметры.
"Profile" является презентационным компонентом.
"Profile" является компонентом, который отображает профиль пользователя целиком.
Этот компонент подключается в компоненте "ProfileContainer".
Внутри компонента "Profile" подключаются компоненты:
- "ProfileInfo", который содержит информацию о пользователе;
- "MyPostsContainer", который является контейнером для компонента "MyPosts", содержащего посты пользователя.
*/
const Profile: React.FC<PropsType> = ({profile,
                                       status,
                                       updateUserStatus,
                                       isOwner,
                                       saveUserPhoto,
                                       saveProfile}) => { /*При помощии деструктуризации "props" указываем какие именно
    "props" мы получаем, чтобы не писать далее
    "props.profile", "props.status" и так далее:
    - "profile" - данные профиля пользователя для страницы профиля;
    - "status" - данные статуся пользователя для страницы профиля;
    - "updateUserStatus" - TC для изменения статуса пользователя на странице профиля;
    - "isOwner" - свойство, которое показывает является ли залогиненный пользователь владельцем профиля, который в
    данный момент отображается на странице профиля;
    - "saveUserPhoto" - TC для загрузки фото пользователя на странице профиля и дальнейшего его отображения в нашем
    приложении;
    - "saveProfile" - TC для отправки новых данных профиля пользователя на странице профиля и дальнейшего их отображения
    в нашем приложении.
    Такое мы делаем только в функциональных компонентах.
    Указали при помощи "React.FC<>", что "props" в этом функциональном компоненте имеют тип "PropsType".*/
    /*
    Здесь после return в компоненте начинается HTML разметка.
    Нужно помнить, что в этой разметке должен быть только один корневой элемент.
    Поскольку то, что возвращает return указано с новой строки, поэтому все возвращаемое помещено в круглые скобки.
    */
    return (
        <div> {/*Этот элемент "div" и есть наш корневой элемент.*/}
            {/*Далее отрисовываем компонент "ProfileInfo" и передаем ему через "props" необходимы для него данные.*/}
            <ProfileInfo profile={profile} /*Данные профиля пользователя для страницы профиля.*/
                         status={status} /*Данные статуся пользователя для страницы профиля.*/
                         updateUserStatus={updateUserStatus} /*TC для изменения статуса пользователя на
                         странице профиля.*/
                         isOwner={isOwner} /*Свойство, которое показывает является ли залогиненный пользователь
                         владельцем профиля, который в данный момент отображается на странице профиля.*/
                         saveUserPhoto={saveUserPhoto} /*TC для загрузки фото пользователя на странице профиля и
                         дальнейшего его отображения в нашем приложении.*/
                         saveProfile={saveProfile} /*TC для отправки новых данных профиля пользователя на
                         странице профиля и дальнейшего их отображения в нашем приложении.*/
            />

            {/*А также отрисовываем компонент "MyPostsContainer" помимо компонента "ProfileInfo".*/}
            <MyPostsContainer/>
        </div>
    );
}

export default Profile; /*Экспортируем компонент "Profile" по default и будем его использовать в нашем проекте под
именем "Profile", экспорт необходим для импорта.*/