import React from 'react';
/*Импортируем компонент "Contact".*/
import {Contact} from './Contact/Contact';
/*Импортируем типы "ContactsType" и "ProfileType".*/
import {ContactsType, ProfileType} from '../../../../types/types';

/*Создаем тип для props компонента "ProfileData".*/
type ProfileDataPropsType = {
    /*Информация о профиле пользователя, полученная с сервера должна быть типа "ProfileType" или иметь тип null, то есть
    быть пустой.*/
    profile: ProfileType
    /*Свойство, показывающее является ли залогиненный пользователь владельцем профиля, который в данный момент
    отображается на странице профиля, должно быть булева типа.*/
    isOwner: boolean
    /*Функция, при вызове активирующая режим редактирования профиля пользователя, должна быть функцией, которая ничего
    не принимает и не возвращает. Это функция создается в компоненте "ProfileInfo" и передается в компонент
    "ProfileData".*/
    activateEditMode: () => void
};

/*"ProfileData" это функциональный компонент, который создан в виде стрелочной функции. "ProfileData" является
компонентом, который занимается отображением данных профиля пользователя и содержит интерфейс для перехода в режим
редактирования этой информации.

Внутри компонента "ProfileData" используются следующие компоненты:
1. "Contact" - компонент, который содержит заготовку для полей контактов пользователя, используемых в маппинге для
отрисовки однотипного JSX. Импортирован.

Компонент "ProfileData" импортируется в файле "ProfileInfo.tsx".

При помощи деструктуризации props указываем какие именно props мы получаем:
1. "profile" - данные профиля пользователя для страницы профиля.
2. "isOwner" - свойство, показывающее является ли залогиненный пользователь владельцем профиля, в данный момент
отображаемый на странице профиля.
3. "activateEditMode" - функция, которая при вызове активирует режим редактирования профиля пользователя.*/
export const ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, activateEditMode}) => {
    return (
        <div>
            {/*Если пользователь является владельцем открытого профиля, то отображаем элемент "div", внутри которого
            есть элемент "button", для отображения кнопки перехода в режим редактирования данных профиля, для чего
            указана callback-функция "activateEditMode()" на событии при нажатии.*/}
            {isOwner && <div>
                <button onClick={activateEditMode}>Edit</button>
            </div>}

            {/*Этот элемент "div" содержит полное имя пользователя, которое берется из props.*/}
            <div><b>1. Full Name</b>: {profile.fullName}</div>

            {/*Этот элемент "div" содержит информацию о пользователе "Обо мне", которая берется из props.*/}
            <div><b>2. About Me</b>: {profile.aboutMe}</div>

            {/*Этот элемент "div" содержит контакты пользователя, которые берутся из props. Создаются следующим
            образом. При помощи метода "keys()" глобального объекта "Object" мы можем проитерироваться по ключам
            переданного объекта "profile.contacts". Возьмутся все ключи "key" и завернутся в массив строк. А далее мы
            мапим этот массив, чтобы отрисовать однотипный JSX с полями контактов при помощи компонента "Contact".*/}
            <div>
                <b>3. Contacts</b>: {
                Object
                    .keys(profile.contacts)
                    .map(key => {
                        return <Contact
                            key={key}
                            /*Заголовок поля контакта.*/
                            contactTitle={key}
                            /*Значение поля контакта в соответствии с заголовком. Здесь указываем
                            "as keyof ContactsType", чтобы Typescript понял, что это данные из свойств типа
                            "ContactsType".*/
                            contactValue={profile.contacts[key as keyof ContactsType]}
                        />
                    })
            }
            </div>

            {/*Этот элемент "div" содержит информацию о том ищет ли в данный момент работу пользователь. Если свойство
            "lookingForAJob", которое берется из props, является true, то отрисуется элемент "span" с текстом "Yes",
            иначе отрисуется элемент "span" с текстом "No".*/}
            <div><b>4. Is looking for a job?</b> {profile.lookingForAJob ? <span>Yes</span> : <span>No</span>}</div>

            {/*Если свойство "lookingForAJob" из props, является true, то отрисуется элемент "div" с текстом из свойства
            "lookingForAJobDescription", означающее работу, которую ищет пользователь.*/}
            {profile.lookingForAJob && <div><b>Which one?</b> {profile.lookingForAJobDescription}</div>}
        </div>
    )
};