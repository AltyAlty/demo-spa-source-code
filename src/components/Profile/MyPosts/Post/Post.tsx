import React from 'react';
/*
Подключаем сам "ReactJS", необходим везде, где мы что-то из него используем (например, JSX).
"WebPack" уже встроен в "ReactJS".
*/

import styles from './Post.module.css'; /*Подключаем стили из CSS-модуля.*/


/*Создаем общий тип для всех "props" компонента "Post". Все это нужно для указания типа "props" в функциональном
компоненте "Post".*/
type PropsType = {
    id: number /*"ID" поста должно быть числом. Мы это здесь не используем, но указываем, так как передаем этот "ID" в
    компоненте "MyPosts" в компонент "Post" при использовании функции "map".*/
    message: string /*Текст поста должен быть строкой.*/
    likes: number /*Количество лайков должно быть числом.*/
    avatar: string /*Путь к аватару пользователя должен быть строкой.*/
};


/*
"Post" это функциональный компонент, который создан в виде стрелочной функции.
При взаимодействии с функциональным компонентом React не хранит его постоянно в памяти.
React вызывает функциональный компонент, он делает свою работу (например, возвращает JSX) и компонент удаляется
из памяти.
Функциональный компонент можно создать еще и таким образом: function Post(props) {тело}.
Компонент это функция, которая возвращает JSX.
JSX совмещает в себе JS и HTML.
В JSX для указания класса в стилях нужно использовать "className" вместо "class".
В JSX скобки {} позволяют использовать JS-код внутри HTML-кода.
Каждый компонент это новый тег для ReactJS, и эти теги используются для вызова этих компонентов.
Теги компонентов можно вкладывать друг в друга, тем самым образуя дерево компонентов.
Каждый компонент желательно помещать в отдельный файл.
Каждый компонент всегда вызывается с объектом, внутри которого какие-то параметры.
Если параметры не указаны, то им все равно передается пустой объект в качестве параметров.
Принято объект с параметрами именовать как "props".
Вызывая тег компонента и передавая ему атрибуты, мы отдаем ему параметры.
"Post" является компонентом, который описывает, как должны выглядеть посты пользователя в его профиле.
Этот компонент подключается в компоненте "MyPosts".
*/
export const Post: React.FC<PropsType> = ({avatar, message, likes}) => { /*Указываем какие именно
"props" мы получаем, чтобы не писать далее "props.avatar", "props.message" и так далее:
- "avatar" - путь к аватару пользователя;
- "message" - текст поста;
- "likes" - количество лайков.
Такое мы делаем только в функциональных компонентах. Указали при помощи "React.FC<>", что "props" в этом функциональном
компоненте имеют тип "PropsType". Также указали, что экспортируем этот компонент.*/
    /*
    Здесь после return в компоненте начинается HTML разметка.
    Нужно помнить, что в этой разметке должен быть только один корневой элемент.
    Поскольку то, что возвращает return указано с новой строки, поэтому все возвращаемое помещено в круглые скобки.
    */
    return (
        <div className={styles.item}> {/*Этот элемент "div" и есть наш корневой элемент. Этот элемент представляет из
        себя типовое отображение постов пользователя в его профиле, которое будет отрисовываться в компоненте "MyPosts"
        при помощи метода "map".*/}
            <img src={avatar} alt=''/> {/*Пост пользователя в его профиле содержит аватар пользователя, ссылка на
            который берется из параметров "props".*/}

            {message} {/*Также пост пользователя в его профиле содержит текст этого поста, которое берется из параметров
            "props".*/}

            <div><span>likes: {likes}</span></div> {/*А также пост пользователя в его профиле содержит количество лайков
            у этого поста, которое берется из параметров "props".*/}
        </div>
    );
};