/*Импортируем общий тип "ResponseWithDataType" для некоторых ответов от сервера со схожей структурой ответа.*/
import {instance, ResponseWithDataType} from './api';
/*Импортируем типы "PhotosType" и "ProfileType".*/
import {PhotosType, ProfileType} from '../types/types';

/*Создаем отдельный тип для "data" для запроса "saveUserPhoto()" из объекта с запросами "profileAPI". Используется для
уточнения в типе "ResponseType".*/
type SaveUserPhotoResponseDataType = {
    /*Объект с фото пользователя должно быть типа "PhotosType"*/
    photos: PhotosType
    /*Путь к уменьшенной версии фото пользователя должен быть строкой или null (то есть быть пустым). Это свойство
    видимо добавлено на сервере ошибочно, так как дублирует часть объекта "photos".*/
    small: string | null
    /*Путь к увеличенной версии фото пользователя должен быть строкой или null (то есть быть пустым). Это свойство
    видимо добавлено на сервере ошибочно, так как дублирует часть объекта "photos".*/
    large: string | null
};

/*Объект "profileAPI" содержит запросы, связанные со страницей профиля пользователя.*/
export const profileAPI = {
    /*Эта функция является запросом на получение данных профиля пользователя для страницы профиля. Данная функция
    принимает один параметр в виде ID пользователя, который должен быть числом.*/
    getUserProfile(userID: number) {
        return (
            /*Указываем что добавляется к базовому URL внутри "instance", чтобы получить данные профиля пользователя.
            Указываем, что этот GET-запрос возвращает промис с типом "ProfileType".*/
            instance.get<ProfileType>(`profile/${userID}`)
                /*Метод "then()" создает промис. Какие-то данные придут от сервера и выполниться стрелочная функция c
                объектом "response". Данные, которые конкретно будут нужны нам, будут находиться внутри свойства
                "response.data". Это свойство "data" создается самим запросом и туда помещается информация от сервера.

                Сама же структура данных в свойстве "data" определяется сервером. Согласно API сервера там находятся:
                1. "aboutMe" - информация "обо мне" (на сайте API этого нет, но на самом деле на сервере это поле
                имеется).
                2. "contacts": - контакты
                  1) "github"
                  2) "vk"
                  3) "facebook"
                  4) "instagram"
                  5) "twitter"
                  6) "website"
                  7) "youtube"
                  8) "mainLink".
                3. "fullName" - полное имя.
                4. "lookingForAJob" - ищет ли работу.
                5. "lookingForAJobDescription" - какую ищет работу.
                6. "photos": - фото.
                  1) "small"
                  2) "large".
                7. "userId" - ID пользователя.

                Получив ответ от сервера в виде нужных данных, возвращаем их далее, чтобы установить их в наш state при
                помощи TC "getUserProfile()".*/
                .then(response => { return response.data })
        );
    },

    /*Эта функция является запросом на получение данных статуса пользователя для страницы профиля. Данная функция
    принимает один параметр в виде ID пользователя, который должен быть числом.*/
    getUserStatus(userID: number) {
        return (
            /*Указываем что добавляется к базовому URL внутри "instance", чтобы получить данные статуса пользователя.
            Указываем, что этот GET-запрос возвращает промис с типом строки.*/
            instance.get<string>(`profile/status/${userID}`)
                /*Метод "then()" создает промис. Какие-то данные придут от сервера и выполниться стрелочная функция c
                объектом "response". Данные, которые конкретно будут нужны нам, будут находиться внутри свойства
                "response.data". Это свойство "data" создается самим запросом и туда помещается информация от сервера.

                Сама же структура данных в свойстве "data" определяется сервером. Согласно API сервера там находится
                текст статуса пользователя (хотя было бы лучше, чтобы данные приходили в формате JSON, то есть в данном
                случае не возвращается объект со свойствами, как это происходит в других запросах).

                Получив ответ от сервера в виде нужных данных, возвращаем их далее, чтобы установить их в наш state при
                помощи TC "getUserStatus()".*/
                .then(response => { return response.data })
        );
    },

    /*Эта функция является запросом на изменение данных статуса пользователя для страницы профиля на сервере. Данная
    функция принимает один параметр в виде строки с информацией из статуса. Согласно API сервера максимальная длинна
    статуса 300 символов в формате JSON.*/
    updateUserStatus(status: string) {
        return (
            /*Указываем что добавляется к базовому URL внутри "instance", чтобы отправить на сервер новые данные статуса
            пользователя. А также указываем объект с этими данными. Еще указываем, что этот PUT-запрос возвращает промис
            с типом "ResponseWithDataType".*/
            instance.put<ResponseWithDataType>(`profile/status`, {status: status})
                /*Метод "then()" создает промис. Какие-то данные придут от сервера и выполниться стрелочная функция c
                объектом "response". Данные, которые конкретно будут нужны нам, будут находиться внутри свойства
                "response.data". Это свойство "data" создается самим запросом и туда помещается информация от сервера.

                Сама же структура данных в свойстве "data" определяется сервером. Согласно API сервера там находятся:
                1. "resultCode" - код, означающий успешно ли прошло изменение статуса пользователя (0 - все хорошо, 1 -
                какая-то ошибка).
                2. "messages" - массив с информационными сообщениями от сервера (например, при какой-либо ошибке во
                время обновления статуса пользователя).
                3. "data" - какие-то дополнительные данные (в данный момент не используется).

                Получив ответ от сервера в виде нужных данных, возвращаем их далее, чтобы установить их в наш state при
                помощи TC "updateUserStatus()".*/
                .then(response => { return response.data })
        );
    },

    /*Эта функция является запросом на загрузку фото пользователя на сервер. Данная функция принимает один параметр в
    виде файла. Тип этого файла указан как File из Typescript.*/
    saveUserPhoto(photoFile: File) {
        const formData = new FormData();
        /*Поскольку здесь мы передаем не просто JSON-данные, а изображение, то поэтому формируем специальный объект при
        помощи функции "formData()". При помощи метода "formData.append()" добавляем в этот объект файл с фото. "image"
        - так указывается согласно API сервера. Третьим параметром отправляется объект со специфическими заголовками, но
        в данном случае и без него все работает.*/
        formData.append('image', photoFile);

        return (
            /*Указываем что добавляется к базовому URL внутри "instance", чтобы отправить на сервер фото пользователя. А
            также указываем объект с этим фото. Еще указываем, что этот PUT-запрос возвращает промис с типом
            "ResponseWithDataType<SaveUserPhotoResponseDataType>".*/
            instance.put<ResponseWithDataType<SaveUserPhotoResponseDataType>>
            (`profile/photo`, formData/*, {headers: {'Content-Type': 'multipart/form-data'}}*/)
                /*Метод "then()" создает промис. Какие-то данные придут от сервера и выполниться стрелочная функция c
                объектом "response". Данные, которые конкретно будут нужны нам, будут находиться внутри свойства
                "response.data". Это свойство "data" создается самим запросом и туда помещается информация от сервера.

                Сама же структура данных в свойстве "data" определяется сервером. Согласно API сервера там находятся:
                1. "resultCode" - код, означающий успешно ли прошла загрузка фото пользователя (0 - все хорошо, другие
                числа - какая-то ошибка).
                2. "messages" - массив с информационными сообщениями от сервера (например, при какой-либо ошибке во
                время загрузки фото).
                3. "data" - дополнительные данные, содержащие еще один объект "photos", который в свою очередь имеет еще
                два свойства:
                  1) "small" - URL фото в маленьком размере, если отсутствует, то будет null.
                  2) "large" - URL фото в большом размере, если отсутствует, то будет null.
                Помимо наличия объекта "photos", свойство "data" имеет также свои свойства "small" и "large", копирующие
                аналогичные свойства у объекта "photos". Предположительно это ошибочно добавили на сервере.

                Получив ответ от сервера в виде нужных данных, возвращаем их далее, чтобы установить их в наш state при
                помощи TC "saveUserPhoto()"*/
                .then(response => { return response.data })
        );
    },

    /*Эта функция является запросом на отправку новых данных профиля пользователя на сервер. Данная функция принимает
    один параметр в виде объекта с данными типа "ProfileType". Согласно API сервера в этом объекте должно находится
    следующее:
    1. "aboutMe" - информация "обо мне" (на сайте API этого нет, но на самом деле на сервере это поле имеется).
    2. "contacts": - контакты
      1) "github"
      2) "vk"
      3) "facebook"
      4) "instagram"
      5) "twitter"
      6) "website"
      7) "youtube"
      8) "mainLink".
    3. "fullName" - полное имя.
    4. "lookingForAJob" - ищет ли работу.
    5. "lookingForAJobDescription" - какую ищет работу.
    6. "photos": - фото.
      1) "small"
      2) "large".
    7. "userId" - ID пользователя.*/
    saveProfile(profile: ProfileType) {
        return (
            /*Указываем что добавляется к базовому URL внутри "instance", чтобы отправить на сервер новые данные профиля
            пользователя. А также указываем объект с этими данными. Еще указываем, что этот PUT-запрос возвращает промис
            с типом "ResponseWithDataType".*/
            instance.put<ResponseWithDataType>(`profile`, profile)
                /*Метод "then()" создает промис. Какие-то данные придут от сервера и выполниться стрелочная функция c
                объектом "response". Данные, которые конкретно будут нужны нам, будут находиться внутри свойства
                "response.data". Это свойство "data" создается самим запросом и туда помещается информация от сервера.

                Сама же структура данных в свойстве "data" определяется сервером. Согласно API сервера там находятся:
                1. "resultCode" - код, означающий успешно ли прошла отправка новых данных профиля пользователя (0 - все
                хорошо, другие числа - какая-то ошибка).
                2. "messages" - массив с информационными сообщениями от сервера (например, при какой-либо ошибке во
                время отправки новых данных профиля пользователя).
                3. "data" - какие-то дополнительные данные (в данный момент не используется).

                Получив ответ от сервера в виде нужных данных, возвращаем их далее, чтобы установить их в наш state при
                помощи TC "saveProfile()".*/
                .then(response => { return response.data })
        );
    }
};