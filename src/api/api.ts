/*Этот файл был специально создан для описания в одном месте всех AJAX-запросов на сервер, чтобы компоненты не создавали
side effects такого типа. Этот файл отвечает за DAL - Data Access Layer. Правда в дальнейшем сами запросы мы перенесли в
отдельные файлы по категориям.

Cookie - это файл, который цепляется ко всем запросам на сервер. Cookie-файлы связаны с идентификацией пользователя.
Сервер при подтверждении пользователя записывает идентификатор пользователя в cookie-файлы и отправляет в закодированном
виде (в нашем случае в незакодированном) пользователю. Далее эти cookie-файлы записываются браузером до тех пор, пока не
истечет срок их жизни, который в них установлен. Галочка "Запомнить меня?" - это про срок жизни cookie-файлов.

В дальнейшем при общении с сервером в cookie-файлах будет использоваться идентификатор пользователя. Таким образом,
сервер сможет определять пользователя. Кодировать или декодировать идентификатор может только сервер.

Для каждого домена создаются отдельные cookie-файлы. Запрещено делать кросс-доменные запросы, за исключением если домен
дал на это разрешение. Это важно поскольку наше приложение находится на локальном хосте и мы делаем запросы на другой
домен из нашего приложения. При кроссдоменных запросах, перед основным запросом, браузер отправляет OPTIONS-запрос для
получения разрешения от сервера на осуществление кроссдоменных запросов. Это часть CORS - политики безопасности
браузера.

Чтобы залогиниться в нашем приложении нужно сначала залогиниться на сайте API: https://social-network.samuraijs.com/.

Настройки в POST-запросе передаются третьим параметром. Настройки в GET-запросе и DELETE-запросе передаются вторым
параметром. GET-запросы и DELETE-запросы ничего не могут передать на сервер, кроме адресной строки самого URL-адреса.
POST-запросы и PUT-запросы могут отправлять на сервер разные данные, некий "payload" (например, фото или текст).

Все запросы, кроме GET-запросов, требуют обязательного ключа доступа, который, в нашем случае, генерируется на сайте
API: https://social-network.samuraijs.com/account. Такие ключи указываются в параметрах запросов в свойстве "headers".

При осуществлении запросов в нашем приложении можно получить ошибку 429, которая означает, что превышен лимит запросов.
Для снятия этого ограничения нужно купить Premium-аккаунт на сайте API (уже, вроде, неактуально, так как часть
ограничений была снята).

Библиотека Axios нужна для работы с запросами на сервер. Запросы осуществляются на endpoints, которые представляют собой
URL.

Наш API сервера находится здесь: "https://social-network.samuraijs.com/docs". У каждого API сервера есть базовый URL, в
нашем случае это "https://social-network.samuraijs.com/api/1.0/". К базовому URL дописываются определенные элементы
(например, "/users"), чтобы получить какую-то категорию данных.

В нашем случае мы получаем ответы от сервера в формате JSON.

Существует подход "API first": сначала создается API, а потом уже front-end и back-end.

В библиотеке Axios любой GET-запрос, POST-запрос или PUT-запрос являются generic и возвращают промис, который можно
уточнить при помощи Typescript.*/
import axios from 'axios';

/*Создаем "instance" (экземпляр). Метод "axios.create()" позволяет создавать экземпляры из Axios. Этот экземпляр будет
содержать необходимые параметры для наших запросов.*/
export const instance = axios.create({
    /*Указываем, чтобы к запросам прикреплялись cookie-файлы.*/
    withCredentials: true,
    /*Указываем базовый URL. Используем обратные кавычки ``, чтобы можно было использовать спецсимволы.*/
    baseURL: `https://social-network.samuraijs.com/api/1.0/`,
    /*Указываем обязательный ключ доступа, который сгенерирован на сайте API. В целях безопасности, нужно удалять при
    осуществлении коммитов.*/
    headers: {
        'API-KEY': ''
    }
});

/*enum в TS перечисляет строки или числа. При помощи enum создаем список кодов ответа от сервера, которые используются в
TC "getAuthUserData()" и в "login()" в файле "auth-reducer.ts".*/
export enum ResultCodeEnum {
    Success = 0,
    Error = 1
};

/*Создаем список кодов ответа от сервера, которые используются в TC "login()" в файле "auth-reducer.ts".*/
export enum ResultCodeForCaptchaEnum {
    CaptchaIsRequired = 10
};

/*Создаем общий тип для ответов от сервера, где ответ имеет следующую структуру:
1. "items" - массив каких-то элементов.
2. "totalCount" - количество этих элементов.
3. "error" - какое-то информационное сообщение об ошибке.

Этот тип используется в типе "GetUsersType" в файле "users-api.ts".*/
export type ResponseWithItemsType<T> = {
    items: Array<T>
    totalCount: number
    error: string | null
};

/*Создаем общий тип для ответов от сервера, где ответ имеет следующую структуру:
1. "data" - объект, содержащий какие-то данные.
2. "resultCode" - код какой-то ошибки.
3. "messages" - массив с какими-то информационными сообщениями об ошибке, например:
    1) при какой-либо ошибке во время залогинивания в запросах "me()" и "login()" из файла "auth-api.ts";
    2) при какой-либо ошибке во время разлогинивания в запросе "logout()" из файла "auth-api.ts";
    3) при какой-либо ошибке во время фолловинга/анфолловинга пользователя в запросах "follow()" и "unfollow()" из файла
    "users-api.ts";
    4) при какой-либо ошибке во время обновления статуса пользователя в запросе "updateUserStatus()" из файла
    "profile-api.ts";
    5) при какой-либо ошибке во время сохранения фото пользователя в запросе "saveUserPhoto()" из файла
    "profile-api.ts";
    6) при какой-либо ошибке во время сохранения данных профиля в запросе "saveProfile()" из файла "profile-api.ts".

Данный тип является generic, в котором мы уточняем "D" - наша "data" (по умолчанию это пустой объект) и "RC" - наш
"resultCode" (по умолчанию список "ResultCodeEnum").

Этот тип используется в запросах:
- GET в запросе "me()" в файле "auth-api.ts";
- POST в запросе "login()" в файле "auth-api.ts";
- DELETE в запросе "logout()" в файле "auth-api.ts";
- POST в запросе "follow()" в файле "users-api.ts";
- DELETE в запросе "unfollow()" в файле "users-api.ts";
- PUT в запросе "updateUserStatus()" в файле "profile-api.ts";
- PUT в запросе "saveUserPhoto()" в файле "profile-api.ts";
- PUT в запросе "saveProfile()" в файле "profile-api.ts".*/
export type ResponseWithDataType<D = {}, RC = ResultCodeEnum> = {
    data: D
    resultCode: RC
    messages: Array<string>
};