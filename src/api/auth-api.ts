/*Импортируем "instance" для более быстрого создания запросов. Также импортируем "ResultCodeEnum" - список кодов ответа
от сервера, которые используются в TC "getAuthUserData()" и "login()", для осуществления типизации. Так же для типизации
импортируем "ResultCodeForCaptchaEnum" - список кодов ответа от сервера, которые используются в TC "login()". В добавок
импортируем общий тип "ResponseWithDataType" для некоторых ответов от сервера со схожей структурой ответа.*/
import {instance, ResultCodeEnum, ResultCodeForCaptchaEnum, ResponseWithDataType} from './api';

/*Создаем отдельный тип для "data" для запроса "me()" из объекта с запросами "authAPI". Используется для уточнения в
типе "ResponseType". Этот объект "data" должен содержать информацию о залогиненном пользователе.*/
type MeResponseDataType = {
    /*ID залогиненного пользователя, которое должно быть числом.*/
    id: number
    /*Email залогиненного пользователя, который должен быть строкой.*/
    email: string
    /*Логин залогиненного пользователя, который должен быть строкой.*/
    login: string
};

/*Создаем отдельный тип для "data" для запроса "login()" из объекта с запросами "authAPI". Используется для уточнения в
типе "ResponseType".*/
type LoginResponseDataType = {
    /*ID залогиненного пользователя, которое должно быть числом.*/
    userId: number
};

/*Создаем отдельный тип для "data" для запроса "logout()" из объекта с запросами "authAPI". Используется для уточнения в
типе "ResponseType".*/
type LogoutResponseDataType = {
    /*Таким образом мы указываем, что здесь могут быть любые свойства объекта.*/
    [key: string]: any
};

/*Объект "authAPI" содержит запросы, связанные с аутентификацией.*/
export const authAPI = {
    /*Эта функция является запросом на запрос информации для залогинивания через наше приложение. Перед этим необходимо
    либо залогиниться на сайте API для создания cookie-файлов, чтобы при запросе сервер мог нас идентифицировать, либо
    ввести данные для залогинивания в нашем приложении.*/
    me() {
        return (
            /*Делаем GET-запрос для залогинивания в нашем приложении на адрес как указано в API сервера. Указываем, что
            этот GET-запрос возвращает промис с типом "ResponseWithDataType<MeResponseDataType>".*/
            instance.get<ResponseWithDataType<MeResponseDataType>>(`auth/me`)
                /*Метод "then()" создает промис. Какие-то данные придут от сервера и выполниться стрелочная функция c
                объектом "response". Данные, которые конкретно будут нужны нам, будут находиться внутри свойства
                "response.data". Это свойство "data" создается самим запросом и туда помещается информация от сервера.

                Сама же структура данных в свойстве "data" определяется сервером. Согласно API сервера там находятся:
                1. еще один объект "data", который в свою очередь содержит "id" (ID залогиненного пользователя), "email"
                (email залогиненного пользователя) и "login" (логин залогиненного пользователя).
                2. "resultCode" - код ответа сервера (0 - все хорошо, 1 - какая-то ошибка).
                3. "messages" - массив с информационными сообщениями от сервера (например, при какой-либо ошибке во
                время залогинивания).

                Получив ответ от сервера в виде нужных данных, возвращаем их далее, чтобы установить их в наш state при
                помощи TC "getAuthUserData()".*/
                .then(response => response.data)
        );
    },

    /*Эта функция является запросом на залогинивание через наше приложение. Перед этим не нужно залогиниваться на сайте
    API для создания cookie-файлов. Нужно просто ввести свои данные для залогинивания в нашем приложении. На сервер
    отправится запрос вместе с объектом данных, которые включают в себя email (должна быть строкой), пароль (должен быть
    строкой), флаг "Запомнить?" (должен быть булева типа) и введенная капча (должна быть строкой или null, то есть быть
    пустой), если таковая была.*/
    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {
        return (
            /*Делаем POST-запрос для залогинивания в нашем приложении на адрес как указано в API сервера. В результате
            сервер создаст cookie-фалы. Указываем, что этот POST-запрос возвращает промис с типом
            "ResponseWithDataType<LoginResponseDataType, ResultCodeEnum | ResultCodeForCaptchaEnum>".*/
            instance.post<ResponseWithDataType<LoginResponseDataType, ResultCodeEnum | ResultCodeForCaptchaEnum>>
            (`auth/login`, {email, password, rememberMe, captcha})
                /*Метод "then()" создает промис. Какие-то данные придут от сервера и выполниться стрелочная функция c
                объектом "response". Данные, которые конкретно будут нужны нам, будут находиться внутри свойства
                "response.data". Это свойство "data" создается самим запросом и туда помещается информация от сервера.

                Сама же структура данных в свойстве "data" определяется сервером. Согласно API сервера там находятся:
                1. "resultCode" - код, означающий успешно ли мы залогинились или нет (0 - все хорошо, 10 - нужно ввести
                капчу).
                2. "messages" - массив с информационными сообщениями от сервера (например, при какой-либо ошибке во
                время залогинивания).
                3. "data" - объект, содержащий свойство "userId" с ID залогиненного пользователя.

                Получив ответ от сервера в виде нужных данных, возвращаем их далее, чтобы осуществить логинизацию
                пользователя при помощи TC "login()".*/
                .then(response => response.data)
        );
    },

    /*Эта функция является запросом на разлогинивание через наше приложение. Перед этим нужно быть уже залогинен, чтобы
    были созданы cookie-файлы.*/
    logout() {
        return (
            /*Делаем DELETE-запрос для разлогинивания в нашем приложении на адрес как указано в API сайта. В результате
            сервер удалит cookie-файлы. Указываем, что этот DELETE-запрос возвращает промис с типом
            "ResponseWithDataType<LogoutResponseDataType>".*/
            instance.delete<ResponseWithDataType<LogoutResponseDataType>>(`auth/login`)
                /*Метод "then()" создает промис. Какие-то данные придут от сервера и выполниться стрелочная функция c
                объектом "response". Данные, которые конкретно будут нужны нам, будут находиться внутри свойства
                "response.data". Это свойство "data" создается самим запросом и туда помещается информация от сервера.

                Сама же структура данных в свойстве "data" определяется сервером. Согласно API сервера там находятся:
                1. "resultCode" - код, означающий успешно ли мы залогинились или нет (0 - все хорошо, другие числа -
                какая-то ошибка).
                2. "messages" - массив с информационными сообщениями от сервера (например, при какой-либо ошибке во
                время разлогинивания).
                3. "data" - пустой объект, потенциально может содержать какую-то дополнительную информацию.

                Получив ответ от сервера в виде нужных данных, возвращаем их далее, чтобы осуществить разлогинивание
                пользователя при помощи TC "logout()".*/
                .then(response => response.data)
        );
    }
};