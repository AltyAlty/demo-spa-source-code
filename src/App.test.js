/*Это файл с тестами для компонента "App". Он уже был создан изначально и содержал первый тест.

Тесты в "TDD" пишутся заранее, чтобы программа им соответствовала. Тесты обязуют нас писать правильно структурированную
программу. Тесты работают точечно, то есть нам не надо каждый раз запускать программу полностью, чтобы ее
протестировать.

Unit-тесты тестируют отдельные части приложения, например, модули, компоненты, функции, селекторы и так далее.

".test." в названии файла сообщает настроенной системе "Webpack" и тестовой среде разработки (это скрыто в
"react-scripts" (используется библиотека "JEST"), "create-react-app" скрыл эти детали), что такой файл содержит тесты и
IDE будет их запускать. Желательно, чтобы каждый тест проверял что-то одно.

В этом файле уже есть тест, который можно запустить прямо из WebStorm или через консоль: npm run test.*/

import React from 'react';
import ReactDOM from 'react-dom';
import {render} from '@testing-library/react';
/*Импортируем компонент "AppMain".*/
import AppMain from './App';

// this test finds the specified text in DOM
// test('renders learn react link', () => {
//     const {getByText} = render(<AppMain/>);
//     const linkElement = getByText(/learn react/i);
//     expect(linkElement).toBeInTheDocument();
// });

/*Тест №2. Компонент отрисовывается без падений. "test" позволит определить IDE, что это тест.*/
test('renders without crashing', () => {
    /*1. При помощи нативного JS создаем элемент "div" в памяти.*/
    const div = document.createElement('div');
    /*2. Отрисовываем этот элемент "div" в нашем компоненте "App".*/
    ReactDOM.render(<AppMain/>, div);
    /*3. Потом демонтируем этот элемент "div", то есть убираем мусор из памяти. Если на шаге 2 все хорошо, то значит,
    что тест пройден. Чтобы он проходил успешно мы перенесли все обвертки над "App" из файла "index.js" в файл
    "App.tsx".*/
    ReactDOM.unmountComponentAtNode(div);
});