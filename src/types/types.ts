/*Это файл с типами, которые мы используем в нашем проекте при помощи Typescript. Typescript - это библиотека, которая
добавляет строгую типизацию (разработка Microsoft). Typescript - это язык, который является некой надстройкой над языком
JavaScript. Typescript предупреждает нас заранее об ошибке до запуска приложения. Typescript транслируется в JavaScript
при помощи TypeScriptCompiler (TSC).

В Typescript нам нужно изначально зафиксировать в объекте свойства, так как добавлять их потом нельзя, можно только
менять значения этих свойств. Везде, где мы видим объект, мы для него выводим тип.

В Node Package Manager (NPM) выкладываются JS-версии кода, даже если библиотека, например, была написана на Typescript.
Чтобы мы могли использовать такие библиотеки с Typescript, разработчики таких библиотек положили рядом с этими
библиотеками описания типов (type definition, файлы ".d.ts") и указали отдельные пакеты для определения типов
("@types/имя_пакета" внутри этих файлов ".d.ts").

Typescript позволяет переводить на него приложение по частям, а не весь сразу. Расширения ".ts" или ".tsx" говорят о
том, что в таких файлах содержится Typescript.

typeof в Typescript выводит значение константы, а не ее тип.

Установка Typescript: npm install --save typescript @types/node @types/react @types/react-dom @types/jest
Установка типизации библиотеки Redux Form: npm install --save @types/redux-form
Установка типизации библиотеки Classnames: npm install --save @types/classnames
Установка типизации библиотеки React Redux: npm install --save @types/react-redux
Установка типизации библиотеки React Router DOM: npm install --save @types/react-router-dom
Установка типизации библиотеки React Test Renderer: npm install --save @types/react-test-renderer
Установка типизации библиотеки UUID: npm install --save @types/uuid

После установки некоторых пакетов могут появиться ложные ошибки, перезапуск IDE может их убрать.*/

/*Импортируем из ассетов проекта аватар пользователя. Это нужно нам здесь для типизации.*/
import avatarSource from '../assets/images/user.png';

/*Создаем тип для постов на странице профиля пользователя.*/
export type PostType = {
    /*ID поста должно быть числом.*/
    id: number
    /*Текст поста должен быть строкой.*/
    message: string
    /*Количество лайков должно быть числом.*/
    likesCount: number
    /*Путь к аватару пользователя должен быть строкой.*/
    avatar: string
};

/*Создаем тип для профилей пользователя на странице профиля пользователя.*/
export type ProfileType = {
    /*Информация "обо мне" должна быть строкой.*/
    aboutMe: string
    /*Объект с контактами пользователя должен быть типа "ContactsType", который мы создаем ниже.*/
    contacts: ContactsType
    /*Полное имя пользователя должно быть строкой.*/
    fullName: string
    /*Информация ищет ли пользователь работу должна быть булева типа.*/
    lookingForAJob: boolean
    /*Информация какую именно ищет работу пользователь должна быть строкой.*/
    lookingForAJobDescription: string
    /*Объект с фото пользователя должно быть типа "PhotosType", который мы создали ниже.*/
    photos: PhotosType
    /*ID пользователя должно быть числом.*/
    userId: number
};

/*Создаем тип для контактов пользователя на странице профиля пользователя.*/
export type ContactsType = {
    /*Информация о "github" должна быть строкой.*/
    github: string
    /*Информация о "vk" должна быть строкой.*/
    vk: string
    /*Информация о "facebook" должна быть строкой.*/
    facebook: string
    /*Информация о "instagram" должна быть строкой.*/
    instagram: string
    /*Информация о "twitter" должна быть строкой.*/
    twitter: string
    /*Информация о личном сайте должна быть строкой.*/
    website: string
    /*Информация о "youtube" должна быть строкой.*/
    youtube: string
    /*Информация о "mainLink" должна быть строкой.*/
    mainLink: string
};

/*Создаем тип для фото пользователя на странице профиля пользователя.*/
export type PhotosType = {
    /*Путь к уменьшенной версии фото пользователя должен быть строкой или null, то есть быть пустым.*/
    small: string | null
    /*Путь к увеличенной версии фото пользователя должен быть строкой или null, то есть быть пустым.*/
    large: string | null
};

/*Создаем тип для данных по пользователю, который приходит в массиве с данными по пользователям для постраничного вывода
пользователей.*/
export type UserType = {
    /*Имя пользователя должно быть строкой*/
    name: string
    /*ID пользователя должно быть числом.*/
    id: number
    /*Объект с фото пользователя должно быть типа "PhotosType", который мы создаем выше.*/
    photos: PhotosType
    /*Информация о статусе пользователя должна быть строкой.*/
    status: string
    /*Информация о том фолловит ли залогиненный пользователь какого-то другого пользователя должна быть булева типа.*/
    followed: boolean
};

/*Создаем специальный тип на основе изображения аватара из ассетов проекта при помощи typeof.*/
export type AvatarSourceType = typeof avatarSource;